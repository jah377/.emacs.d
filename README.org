#+TITLE: My GNU Emacs Configuration
#+DATE: Wednesday, September 25, 2024
#+PROPERTY: header-args:emacs-lisp :results silent
#+STARTUP: overview

* Introduction

This is my literate Emacs configuration file; there are many like it,
but this one is mine. It serves as both documentation and the source
for configuring Emacs. All necessary config files are generated from
this file by calling ~org-babel-tangle~ (~C-c C-v t~), and stored in the
=/modules= sub-directory. As such, changes should be made in this
document, not in the individual config files.

*N.B.* Modules are individually imported in [[*Conclusion][Conclusion]].

* early-init.el

The =early-init.el= file, introduced with Emacs27, is the first file
that Emacs reads when starting up (before =init.el=). In principal, the
early initialization file should set-up a few basic things before
Emacs produces the initial frame, and should not depend on any
packages.

#+begin_src emacs-lisp :tangle early-init.el
;;; -*- lexical-binding: t -*-
#+end_src

** Temporarily Configure Garbage Collection

Garbage collection (GC) ensures that a program does not exceed its
memory quote or reach a point that it can no longer function. It also
frees up developers from having to manually manage a program's memory
which, in turn, reduces the potential for memory-related bugs.

However, GC can extend startup time. Therefore, we (temporarily) set
~gc-cons-threshold~ to a very large number -- effectively disabling
garbage collection. Otherwise Emacs might freeze. This strategy is
used by =Doom-Emacs= [[[https://github.com/doomemacs/doomemacs/blob/master/early-init.el][doomemacs/early-init.el]]].

*N.B.* This value is reset later in [[*Reset Garbage Collection][Reset Garbage Collection]].

#+begin_src emacs-lisp :tangle early-init.el
;; Temporarily increase garbage collect for fast startup
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

** Disable Frame Resizing

Changing the font, bars, and fringes may resize the frame in order to
preserve the number of oclumns or lines it displays. It is said that
this affects startup times.

Set prior to [[*Disable UI Elements][Disable UI Elements]] as those changes may affect frame
resizing?

+ Damien Cassou :: [[https://github.com/DamienCassou/emacs.d/blob/master/early-init.el#L25][github.com/early-init.el]]
+ Tony Zorman :: [[https://tony-zorman.com/posts/emacs-potpourri.html][A Potpourri of Emacs Tweaks]]

#+begin_src emacs-lisp :tangle early-init.el
;; Inhibit frame resizing due to visual settings
(setq frame-inhibit-implied-resize t)

#+end_src

** Disable UI Elements

#+begin_src emacs-lisp :tangle early-init.el
;; Prevent gimpse of un-styled Emacs
(menu-bar-mode   -1)
(scroll-bar-mode -1) ; Visible scrollbar
(scroll-all-mode -1) ; Synchronized scrolling of buffers
(tool-bar-mode   -1)
(tooltip-mode    -1)

;; No need for splash screen and echo area message
(setq-default inhibit-startup-screen t     ; disable start-up screen
              inhibit-startup-message t    ; disable start-up message
              initial-scratch-message nil  ; Empty initial *scratch* buffer
              initil-buffer-choice t       ; Open *scratch* buffer at init
              initial-major-mode 'fundamental-mode)
#+end_src

* init.el

#+begin_src emacs-lisp :tangle init.el
;;; -*- lexical-binding: t -*-

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s seconds with %d garbage collections."
                     (emacs-init-time "%.2f")
                     gcs-done)))
#+end_src

** Initialize Package Resources

#+begin_src emacs-lisp :tangle init.el
;; Initialize package resources
(require 'package)
(setq package-archives
      '(("gnu elpa"  . "https://elpa.gnu.org/packages/")
        ("melpa"     . "https://melpa.org/packages/")
        ("nongnu"    . "https://elpa.nongnu.org/nongnu/"))
      package-archive-priorities
      '(("melpa"    . 6)
        ("gnu elpa" . 5)
        ("nongnu"   . 4)))
(package-initialize)
#+end_src

** Setup 'use-package'

#+begin_src emacs-lisp :tangle init.el
;; Is this still necessary since 'use-package' now builtin?
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Standardize `use-package` settings
(require 'use-package-ensure)
(setq use-package-always-ensure t
      use-package-compute-statistics t
      use-package-verbose t)
#+end_src

** Tidy Emacs Directory

Default paths used to store configuraiton files and persistent data
are not consistent across Emacs packages, and are often dumped into
~user-emacs-directory~. Alternatively, the =no-littering= package stores
config and data files in =/etc= and =/var= sub-directories of
~user-emacs-directory~.

#+begin_src emacs-lisp :tangle init.el
(use-package no-littering
  :demand t
  :config
  ;; Save customizations in 'etc' sub-directory and load on startup
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file)))
#+end_src

** Reset Garbage Collection

In [[*Temporarily Configure Garbage Collection][Temporarily Configure Garbage Collection]] we maximized GC thresholds
to improve startup time. Here, we use =Doom-Emacs=' "Garbage Collection
Magic Hack" package [[[https://github.com/emacsmirror/gcmh][github/gcmh]]] to reset these values and enforce a
"sneaky" GC strategy.

#+begin_src emacs-lisp :tangle init.el
;; Garbage Collection Magic Hack
(use-package gcmh
  :init (gcmh-mode 1)
  :hook
  (after-init . garbage-collect)

  ;; Must reset GC threshold values after initialization
  (emacs-startup . (lambda () (setq gc-cons-percentage 0.1
                                    gc-cons-threshold (* 32 1024 1024)
                                    gcmh-high-cons-threshold (* 32 1024 1024)
                                    gcmh-idle-delay 30))))
#+end_src

It is recommended that we perform garbage collection when not actively
using Emacs. Therefore, we perform GC if idle for 30 seconds.(credit:
[[https://emacs.stackexchange.com/questions/34342/is-there-any-downside-to-setting-gc-cons-threshold-very-high-and-collecting-ga][StackExchange]])

#+begin_src emacs-lisp :tangle init.el
;; Idle garbage collecting
(run-with-idle-timer 30 t (lambda () (garbage-collect)))
#+end_src

** Better Defaults

Here, we configure default built-in Emacs settings.

*** Frame

#+begin_src emacs-lisp :tangle init.el
;; Change frame title w.r.t. current buffer
(setq frame-title-format
      '("emacs: " (:eval (if (buffer-file-name)
                             (abbreviate-file-name (buffer-file-name)) "%b"))))

;; Maximize frame size at init
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
