#+TITLE: My GNU Emacs Configuration
#+DATE: Wednesday, September 25, 2024
#+PROPERTY: header-args:emacs-lisp :results silent
#+STARTUP: overview
#+auto_tangle: t

* Table of Contents
:PROPERTIES:
:visibility: folded
:TOC:      :include all :depth 1 :ignore this
:END:
:CONTENTS:
- [[#introduction][Introduction]]
- [[#resources][Resources]]
- [[#common-header-for-emacs-libraries][Common Header For Emacs Libraries]]
- [[#early-init-file][Early Init File]]
- [[#init-file][Init File]]
- [[#emacs][Emacs]]
- [[#ui][UI]]
- [[#org-mode][Org-Mode]]
- [[#completion][Completion]]
- [[#dired][DIRED]]
- [[#development][Development]]
- [[#writing][Writing]]
- [[#keybindings][Keybindings]]
- [[#load-modules][Load Modules]]
:END:

* Introduction
:PROPERTIES:
:visibility: folded
:END:

This is my literate Emacs configuration file. It serves as both documentation
and the source for configuring Emacs. All necessary files to configure Emacs
are generated from this file by calling ~org-babel-tangle~ (~C-c C-v t~) and stored
in the =/modules= sub-directory. As such, changes should be made in this
document, not in the individual =.el= files.

* Resources
:PROPERTIES:
:visibility: folded
:END:

The structure and contents of this Emacs configuration was heavily inspired by
a number of individuals. Below is a list of high quality configurations that
are updated with some frequency.

+ [[https://github.com/daviwil/dotfiles][daviwil/dotfiles]]
+ [[https://github.com/karthink/.emacs.d][karthink/.emacs.d]]
+ [[https://github.com/MArpogaus/emacs.d][MArpogaus/emacs.d]]
+ [[https://github.com/angrybacon/dotemacs][angrybacon/dotemacs]]
+ [[https://github.com/gopar/.emacs.d/tree/main][gopar/.emacs.d]]
+ [[https://github.com/dakrone/eos][dakrone/eos]]
+ [[https://github.com/jeremyf/dotemacs/tree/main][jeremyf/dotemacs]]
+ [[https://config.phundrak.com/emacs/][Phundrak/emacs]]
+ [[https://github.com/jwiegley/dot-emacs/blob/master/init.org][jwiegley/dot-emacs]]
+ [[https://github.com/novoid/dot-emacs/blob/master/config.org][novoid/dot-emacs]]
+ [[https://github.com/jackkamm/.emacs.d][jackkamm/.emacs.d]]
+ [[https://github.com/Thaodan/emacs.d][Thaodan/emacs.d]]
+ [[https://github.com/suvratapte/dot-emacs-dot-d/tree/master][suvratapte/dot-emacs-dot-d]]
+ [[https://protesilaos.com/emacs/dotemacs][protesilaos.com/emacs/dotemacs]]
+ [[https://github.com/dakra/dmacs/][dakra/dmacs]]
+ [[https://forgemacs.bharathpalavalli.com/][forgemacs.bharathpalavalli.com]]
+ [[https://github.com/konrad1977/emacs][konrad1977/emacs]]
+ [[https://github.com/PythonNut/quark-emacs][PythonNut/quark-emacs]]
+ [[https://github.com/radian-software/radian][radian-software/radian]]
+ [[https://sachachua.com/dotemacs/index.html][sachachua.com/dotemacs]]
+ [[https://github.com/syohex/dot_files/tree/master/emacs][syohex/dot_files]]
+ [[https://github.com/purcell/emacs.d][purcell/emacs.d]]
+ [[https://github.com/thierryvolpiatto/emacs-config][thierryvolpiatto/emacs-config]]
+ [[https://github.com/xiongtx/.emacs.d][xiongtx/.emacs.d]]
+ [[https://github.com/Wilfred/.emacs.d][Wilfred/.emacs.d]]
+ [[https://panadestein.github.io/emacsd/][panadestein.github.io/emacsd/]]

Other resources that I found helpful include:

+ [[https://sachachua.com/blog/][Sacha Chua: Emacs Summary Blog]]
+ [[https://www.reddit.com/r/emacs/new/][reddit.com/emacs]]
+ [[https://github.com/caisah/emacs.dz?tab=readme-ov-file][github/caisah: Example Configurations]]
+ [[https://idiomdrottning.org/bad-emacs-defaults][Idiomdrottning: Bad Emacs Defaults]]
+ [[https://systemcrafters.net/emacs-from-scratch/the-best-default-settings/][SystemCrafters: Six Emacs Settings Every User Should Consider]]

* Common Header For Emacs Libraries
:PROPERTIES:
:visibility: folded
:END:

Copied from [[https://github.com/MArpogaus/emacs.d/blob/master/emacs.org#common-header-for-emacs-libraries][github.com/MArpogaus]].

#+NAME: header
#+begin_src shell :var FILENAME="init.el" :results output
echo ";;; $FILENAME --- Emacs configuration file  -*- lexical-binding: t; -*-
;; Copyright (C) 2024-$(date +%Y) Jonathan A. Harris

;; Author: Jonathan A. Harris, MSc.
;; Keywords: configuration
;; Homepage: https://github.com/jah377/.emacs.d

;; This file is not part of GNU Emacs.

;;; Commentary:

;; This file has been generated from 'README.org'. DO NOT EDIT.

;; Changes to the configuration should be done in 'README.org' and then
;; re-tangled by calling 'C-c C-v C-t'.

;;; Code:"
#+end_src

* Early Init File
:PROPERTIES:
:header-args: :tangle early-init.el
:END:

The =early-init.el= file, introduced with Emacs27, is the first file that Emacs
reads when starting up. In principal, the early initialization file should
set-up a few basic things before Emacs produces the initial frame, and should
not depend on any packages.

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="early-init.el")>>
#+end_src

** Temporarily Configure Garbage Collection
:PROPERTIES:
:ID:       19407840-a20f-4225-9484-bbf88d3ff00d
:END:

=gc-cons-threshold= setting controls the number of bytes required to trigger
garbage collection (GC); =gc-cons-percentage= related. Setting to
~most-positive-fixnum~ effectively disables GC, which significantly affects
startup times.

Values are lowered after startup to prevent freezing or crashing.

*Source:*
+ [[https://github.com/doomemacs/doomemacs/blob/master/early-init.el#L29][github.com/doomemacs/early-init.el]]
+ [[https://github.com/nilcons/emacs-use-package-fast#a-trick-less-gc-during-startup][github.com/nilcons/emacs-use-package-fast#a-trick-less-gc-during-startup]]

#+begin_src emacs-lisp 
(setq gc-cons-threshold most-positive-fixnum)
(setq gc-cons-percentage 0.6)

;; Restore after startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (setopt gc-cons-threshold (* 16 1024 1024))))

;; Perform GC after startup
(add-hook 'emacs-startup-hook (lambda () (garbage-collect))) 
#+end_src

** Disable Frame Resizing

=frame-inhibit-implied-resize= setting, when set to ~t~, prevents Emacs from
automatically resizing the frame during the initialization process.

Configuring visual elements like font or fringes may trigger Eamcs to resize
the frame in order to preserver a number of columns or lines it
displays. Resizing can be a terribly expensive part of changing the font. By
inhibiting this, it is possible to reduce startup times with fonts that are
larger than the system default.

*Source:*
+ [[https://tony-zorman.com/posts/emacs-potpourri.html][A Potpourri of Emacs Tweaks]]
+ [[https://github.com/DamienCassou/emacs.d/blob/master/early-init.el#L25][github.com/DamienCassou]]
+ [[https://github.com/MArpogaus/emacs.d?tab=readme-ov-file#optimize-startup-time][github.com/MArpogaus]]

*IMPORTANT:* This should be configured before [[id:534b1a9a-e956-42b1-bf81-40b4e82b2c8e][Disable UI Elements]] and [[id:1360c936-229c-44fd-b71c-30f66960d23a][UI]] sections

#+begin_src emacs-lisp 
(setopt frame-inhibit-implied-resize t)
#+end_src

Similarly, =frame-resize-pixelwise= setting, when set to ~t~, disables Emacs from
resizing the frame when changing fonts. Doing so /allegedly/ improves startup
times when fonts are larger than the system default.

*Source:*
+ [[https://github.com/jamescherti/minimal-emacs.d/blob/main/init.el][github/jamescherti/minimal-emacs.d]]

#+begin_src emacs-lisp 
(setopt frame-resize-pixelwise t)
#+end_src

** Disable UI Elements
:PROPERTIES:
:ID:       534b1a9a-e956-42b1-bf81-40b4e82b2c8e
:END:

Remove unnecessary visual elements not only enhances the aesthetics but also
improves startup speed.

#+begin_src emacs-lisp 
(menu-bar-mode   -1) ; Menu bar at top of framen
(scroll-bar-mode -1) ; Visible scroll-bar that appears when scrolling
(scroll-all-mode -1) ; Visible scroll-bar during synchronized scrolling
(tool-bar-mode   -1) ; Icons like "save" button below menu
(tooltip-mode    -1) ; Hoving over (some) elements triggers pop-up boxes
#+end_src

#+begin_src emacs-lisp 
(setq-default initial-major-mode 'text-mode
              inhibit-startup-echo-area-message t ; Disable initial echo message
              inhibit-startup-message t    ; Disable startup message
              inhibit-startup-screen t     ; Disable start-up screen
              inhibit-splash-screen t      ; Disable startup screens/messages
              initial-scratch-message nil  ; Empty '*scratch*' buffer
              initial-buffer-choice t)     ; Open '*scratch*' buffer
#+end_src

** Disable (Some) Warnings

=warning-suppress-types= setting controls the messages sent to =*Warnings*=
buffer. Here, we ignore warnings about "existing variables being aliased",
which are triggered when Emacs packages do not come with =lexical-bindings=.

*Source:*
+ [[https://github.com/Thaodan/emacs.d][github.com/Thaodan]]
+ [[https://github.com/MArpogaus/emacs.d?tab=readme-ov-file#optimize-startup-time][github.com/MArpogaus]]

#+begin_src emacs-lisp 
(setopt warning-suppress-types '((defvaralias) (lexical-binding)))
#+end_src

*N.B.* Including ~;; -*- lexical-binding: t; -*-~ at the top of Emacs lisp files is
essential for controlling how variable bindings work in the code.

** Doom Runtime Optimizations

=Doom Emacs= contains a number of setting configurations to improve runtime
performance. The following was copied from [[https://github.com/doomemacs/doomemacs/blob/da3d0687c5008edbbe5575ac1077798553549a6a/lisp/doom-start.el#L30][doom-start.el]].

*Source:*
+ [[https://github.com/doomemacs/doomemacs/blob/da3d0687c5008edbbe5575ac1077798553549a6a/lisp/doom-start.el#L30][github.com/doomemacs]]
+ [[https://github.com/MArpogaus/emacs.d?tab=readme-ov-file#doom-runtime-optimizations][github.com/MArpogaus]]

#+begin_src emacs-lisp
;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
(setq auto-mode-case-fold nil)

;; PERF: Disable bidirectional text scanning for a modest performance boost.
;;   I've set this to `nil' in the past, but the `bidi-display-reordering's
;;   docs say that is an undefined state and suggest this to be just as good:
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)

;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
;;   reordering of bidirectional text with embedded parentheses (and other
;;   bracket characters whose 'paired-bracket' Unicode property is non-nil).
(setq bidi-inhibit-bpa t)  ; Emacs 27+ only

;; Reduce rendering/line scan work for Emacs by not rendering cursors or
;; regions in non-focused windows.
(setq-default cursor-in-non-selected-windows nil)
(setq highlight-nonselected-windows nil)

;; More performant rapid scrolling over unfontified regions. May cause brief
;; spells of inaccurate syntax highlighting right after scrolling, which should
;; quickly self-correct.
(setq fast-but-imprecise-scrolling t)

;; Increase how much is read from processes in a single chunk (default is 4kb).
;; This is further increased elsewhere, where needed (like our LSP module).
(setq read-process-output-max (* 64 1024))  ; 64kb

;; Don't ping things that look like domain names.
(setq ffap-machine-p-known 'reject)

;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
(setq idle-update-delay 1.0)  ; default is 0.5

;; Font compacting can be terribly expensive, especially for rendering icon
;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
;; hasn't been determined, but do it anyway, just in case. This increases
;; memory usage, however!
(setq inhibit-compacting-font-caches t)

;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
;; receiving input, which should help a little with scrolling performance.
(setq redisplay-skip-fontification-on-input t)
#+end_src

* Init File
:PROPERTIES:
:header-args: :tangle init.el
:END:

The =init.el= serves as the primary configuration file. Most settings and
configurations are organized in separate 'modules/init-*.el' files and loaded
at the end of this file.

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init.el")>>
#+end_src

** Profile Emacs Startup
:PROPERTIES:
:ID:       1269b427-94e9-4df5-98bf-c83a31db096d
:END:

This custom code computes general startup statistics and returns them in
=*scratch*=. This is possible based on our configuration of =initial-buffer-choice=
and =initial-scratch-message= settings in the [[id:534b1a9a-e956-42b1-bf81-40b4e82b2c8e][Disable UI Elements]] section.

*N.B.* If ~use-pacakge-compute statistics t~ (set in [[id:a4fb8525-6004-4685-b4cc-297699db426e][Setup Use-Package]]), calling
~M-x use-package-report~ opens temporary buffer containing package-specific
initialization times.

#+begin_src emacs-lisp 
;; https://github.com/LionyxML/emacs-kick/blob/master/init.el
(add-hook 'after-init-hook
          (lambda ()
            (with-current-buffer (get-buffer-create "*scratch*")
              (insert (format "*Welcome to Emacs!*

+ Loading time :: %s secs
+ Packages :: %s
+ Garbage Collections :: %s"
                              (emacs-init-time "%.2f")
                              (number-to-string (length package-activated-list))
                              gcs-done)))))
#+end_src

** Package Setup
*** Initialize Package Resources

Here, we setup package management, specify desired package archives, and
prioritize them for efficient package installation/updates.

#+begin_src emacs-lisp 
;; Required for managing external packages
(require 'package)

(setopt package-archives
      '(("gnu elpa"  . "https://elpa.gnu.org/packages/")
        ("melpa"     . "https://melpa.org/packages/")
        ("nongnu"    . "https://elpa.nongnu.org/nongnu/"))
      package-archive-priorities
      '(("melpa"    . 6)
        ("gnu elpa" . 5)
        ("nongnu"   . 4)))

;; MANDITORY: Emacs must be aware of available packages before installing
(package-initialize)
#+end_src

*** Setup Use-Package
:PROPERTIES:
:ID:       a4fb8525-6004-4685-b4cc-297699db426e
:END:

~use-package~ is an Emacs macro (added in Emacs29) designed to simplify and
optimize the configuration and management of Emacs packages.

+ use-package-ensure :: External package provides =use-package-always-ensure=
  setting, describe below.

+ use-package-always-ensure :: Automatically installs any package specified in
  a =use-package= declaration if not already installed. No longer need to add
  ~:ensure t~ each time, making the configuration cleaner and less error-prone.

+ use-package-compute-statistics :: ~t~ in order to track package load
  times. Setting necessary for [[id:1269b427-94e9-4df5-98bf-c83a31db096d][Profile Emacs Startup]]

+ use-package-verbose :: ~t~ to return output messages during the loading and
  installation of packages. This is helpful for debugging and tracking the
  loading process.

#+begin_src emacs-lisp 
;; Ensures backwards compatability ('use-package' added in Emacs29)
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package-ensure)
(setopt use-package-always-ensure t
        use-package-compute-statistics t
        use-package-verbose t)
#+end_src

** Tidy Emacs Directory
:PROPERTIES:
:ID:       a0a6ce0f-55d9-415f-a70c-48716e9d8c61
:END:

=no-littering= is an Emacs package designed to organize =.emacs.d= and prevent
clutter from various configuration files and cached data. By default,
configuration and data files in =/etc= and =/var= sub-directories, respectively, of
~user-emacs-directory~. This is advantageous as default paths used to store these
items may not be consistent across Emacs packages.

*N.B.* Emacs stores customization information in =custom.el=. Here, we move that
file to =/etc= and load.

*N.B.* It does not make sense to version control configuration and data files;
they are updated too frequently. However, it is annoying to lose customizations
like bookmarks should we re-clone this repo. Alternatively, it is possible to
store these files in a directory that is backed up to the "cloud" like
=keybase=. This was achieved by creating a simulink to
=/run/user/1001/keybase/...=; we assign that directory to ~my-persist-dir~ which is
referenced in the [[id:7fed44cb-7196-48f4-9708-b6012d1c6c5d][Denote]] and [[id:e62f2c9a-f7fa-4972-afc6-b0dd072d6474][Org-Agenda]] sub-sections.

#+begin_src emacs-lisp 
;; Directory to be backed up in the cloud
(defconst my-persist-dir "/home/jon/.kb_persistent_emacs/")

(use-package no-littering
  :demand t
  :init
  (setopt no-littering-etc-directory (concat my-persist-dir "no-littering/"))
  (setopt no-littering-var-directory (concat my-persist-dir "no-littering/"))
  :config
  (setopt custom-file (no-littering-expand-etc-file-name "custom.el"))
  (load custom-file :no-error-if-file-is-missing))
#+end_src

* Emacs
:PROPERTIES:
:header-args: :tangle modules/init-emacs.el
:END:

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init-emacs.el")>>
#+end_src

** Frame
*** Frame Size

=default-frame-alist= setting specifies parameters of an Emacs frame. Adding
~'(fullscreen . maximized)~ configures Emacs to automatically open in
full-screen.

#+begin_src emacs-lisp 
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

*** Frame Title

=frame-title-format= setting specifies the template for displaying the title bar
of visible Emacs frames. Here, we set it to read ~emacs: <file-name>~.

#+begin_src emacs-lisp 
(setopt frame-title-format
        '("emacs: "
          (:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name)) "%b"))))
#+end_src

*** Buffer Name

=uniquify-buffer-name-style= setting controls how Emacs handles the naming of
buffers displaying files containing the same name; for example
=~/dir/subdir_1/file.el= and and =~/dir/subdir_2/file.el=.

Setting to ~'forward~ displays the name as a truncated file-path in order to
distinguish between files; resulting in =subdir_1/file.el= and =subdir_2/file.el=.

#+begin_src emacs-lisp 
(setopt uniquify-buffer-name-style 'forward)
#+end_src

** Minibuffer

The following recommendations are suggested by the creator of the =vertico.el=
package (see [[https://github.com/minad/vertico][github/vertico]])

*** Recursive Minibuffer
:PROPERTIES:
:ID:       dfe5aad6-6c0b-4e06-8c83-028a59bb9ad1
:END:

=enable-recursive-minibuffers=, when set to ~t~ allows us to enter multiple
minibuffer commands consecutively without closing the previous one. This is
useful when accessing information while already in a minibuffer prompt.

*Example Use-Case:* Checking another file's path in the middle of a ~M-x find-file~
prompt. Possible to call ~M-x~ again, open another minibuffer, check what we
need, and then return to the initial minibuffer.

#+begin_src emacs-lisp 
(setopt enable-recursive-minibuffers t)
#+end_src

*** Read-only Minibuffer
:PROPERTIES:
:ID:       bbc9b953-b553-4928-a0ef-daf6df48a1f8
:END:

The minibuffer-prompt is not meant to be edited. Setting
=minibuffer-prompt-properties= to read-only and hooking the built-in
=cursor-intangible-mode= prevents accidental modifications of the prompt text.

#+begin_src emacs-lisp 
(setopt minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

*N.B.* If ~(setopt minibuffer-prompt-properties nil)~ and we call ~M-x~, possible to
modify the "M-x" by moving the cursor back and deleting "M", "-", and/or
"x". _Not ideal_.

*** Make C-g a Bit More Helpful
:PROPERTIES:
:ID:       51c833dd-b403-40e5-8359-f3b6f15193ff
:END:

By default, the function =keyboard-quit= only closes the minibuffer if the cursor
is inside the minibuffer-window. That is annoying. The following adds some
quality-of-life refinement.

*Source:* [[https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/#h:1e468b2a-9bee-4571-8454-e3f5462d9321][protesilaos.com/basic-emacs-configuration]]

#+begin_src emacs-lisp 
(defun prot/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.  When a minibuffer is
- open, but not focused, close the minibuffer.  When the
- Completions buffer is selected, close it.  In every other case
- use the regular `keyboard-quit'."
  
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(define-key global-map (kbd "C-g") #'prot/keyboard-quit-dwim)
#+end_src

*** Custom Minibuffer Functions
**** Jump to Minibuffer

This is just nice to have.

#+begin_src emacs-lisp 
(defun my/jump-to-minibuffer ()
  "Switch to minibuffer window (if active)"
  (interactive)
  (when (active-minibuffer-window)
    (select-window (active-minibuffer-window))))
#+end_src

** Cursor
*** Cursor Style

#+begin_src emacs-lisp 
(setq-default cursor-type 'bar)
#+end_src

** Mouse/Scrolling
*** Precision Scrolling

=pixel-scroll-precision-mode= is a /built-in/ minor-mode that, when activated,
provides a smoother, more precise scrolling experience. Scrolling occurs by
pixel and not by larger fixed amounts like whole lines or pages.

*N.B.* Recommended by [[https://tony-zorman.com/posts/emacs-potpourri.html][tony-zorman.com]]

#+begin_src emacs-lisp 
(pixel-scroll-precision-mode 1)
#+end_src

*** Mouse Behavior

+ mouse-yank-at-point :: ~t~ to paste at cursor, not where mouse is pointing
+ mouse-wheel-follow-mouse :: ~'t~ to scroll buffer under mouse
+ mouse-wheel-progressive-speed :: ~nil~ to disable accelerated scrolling

#+begin_src emacs-lisp 
(setopt mouse-yank-at-point t
        mouse-wheel-follow-mouth 't
        mouse-wheel-progressive-speed nil)
#+end_src

** Line Numbers
*** Display Line Numbers in Fringe
:PROPERTIES:
:ID:       253507fc-cbf8-40a5-a490-c8651a7d44dd
:END:

=display-line-numbers= is an Emacs package providing =display-line-numbers-mode=
that, when activated, displays the line number on the left side of the buffer.

By default, the fringe is not a fix amount so code on line ~1_000~ will appear
slightly indented from code on line ~1~. To prevent this,
=display-line-numbers-width= is set to ~4~ as we do not anticipate working on files
longer than ~9_999~ lines.

*N.B.* See =global-display-line-numbers-mode=

#+begin_src emacs-lisp 
(use-package display-line-numbers
  :after org-mode
  :hook ((prog-mode conf-mode text-mode)
         (org-mode . (lambda () (display-line-numbers-mode 0))))
  :custom
  (display-line-numbers-width  4 "Prevent uneven gutter due to length of linum"))
#+end_src

** Buffers
*** Buffer Column Width
:PROPERTIES:
:ID:       6881fadb-9439-4939-974c-e50265bd8a0a
:END:
:RELATED:
+ [[id:c955493b-ad4d-4661-ba0a-ad79ce52dbc4][Cleanup White Spaces]] :: See =whitespace-line-column=
:END:

=fill-column= setting specifies the maximum width (ie number of columns) of the
buffer before text is wrapped, or filled, to the next line. Setting to ~79~ to
comply with =PEP8= style guide.

#+begin_src emacs-lisp 
(setopt fill-column 79)
#+end_src

*** Visual Line Wrapping

=global-visual-line-mode= is a /built-in/ minor-mode that, when activated, enables
visual line wrapping across all buffers. Lines that exceed the width of the
frame are automatically wrapped.

#+begin_src emacs-lisp 
(global-visual-line-mode 1)

;; Break at whitespace, not middle of word
(setopt word-wrap t)
#+end_src

*** Overwrite Active Region

=delete-selection-mode= is a /built-in/ minor-mode that, when activated, replaces
or overwrites the selected region. This behavior is similar to most text
editors. Deactivated by default, Emacs will paste/enter text _after_ the selected
region. *Annoying*.

#+begin_src emacs-lisp 
;; Replace active region when typing text
(delete-selection-mode 1)
#+end_src

*** Automatic Buffer Reloading

=global-auto-revert-mode= is a /built-in/ minor-mode that, when
activated,automatically reloads buffers when the underlying file changes on
disk. This is particularly useful when open files change should we switch =git=
branches.

#+begin_src emacs-lisp 
(global-auto-revert-mode 1)
#+end_src

*** Custom Buffer Functions
:PROPERTIES:
:ID:       453fdeac-b2bb-4217-9803-d5c89ceaf6de
:END:
:RELATED:
+ [[id:d831e4e4-e9b1-480e-aa1a-a152d9707275][General.el]]
:END:

**** Copy Buffer Name

#+begin_src emacs-lisp 
(defun my/kill-buffer-name ()
  "Copy file-name of current buffer"
  (interactive)
  (kill-new (buffer-name)))
#+end_src

**** Copy Relative Buffer Path

#+begin_src emacs-lisp 
(defun my/kill-relative-buffer-path ()
  "Copy relative buffer path to kill ring.

Replace '/home/<username>' prefix with '~' if applicable."
  (interactive)
  (if-let* ((full-path (buffer-file-name))
            (abbrev-path (abbreviate-file-name full-path)))
      (progn
        (kill-new abbrev-path)
        (message "Buffer path copied to kill ring: %s" full-path))
    (message "Buffer is not visiting a file.")))
#+end_src

**** Kill Buffers Except Scratch

*N.B.* ~M-x crux-kill-other-buffers~ to kill all but current buffer

#+begin_src emacs-lisp 
(defun my/kill-buffers-except (buffer-name)
  "Kill all buffers except for BUFFER-NAME."
  (dolist (buffer (buffer-list))
    (unless (or (string-equal (buffer-name buffer) buffer-name)
                (string-equal (buffer-name buffer) (concat " " buffer-name)))
      (kill-buffer buffer))))
#+end_src

#+begin_src emacs-lisp 
(defun my/kill-all-buffers-except-scratch ()
  "Kill all buffers except for *scratch*."
  (interactive)
  (my/kill-buffers-except "*scratch*"))
#+end_src

**** Kill Buffers Given Mode

#+begin_src emacs-lisp 
(defun my/kill-buffers-by-mode (&rest modes)
  "Kill all buffers derived from any of MODES.

Ex: (my/kill-buffers-by-mode 'help-mode 'helpful-mode)"
  (let ((killed 0))
    (mapc (lambda (buffer)
            (with-current-buffer buffer
              (when (apply #'derived-mode-p modes)
                (kill-buffer buffer)
                (setq killed (1+ killed)))))
          (buffer-list))
    (message "Killed %d buffer(s) derived from %s" killed modes)))
#+end_src

** White Space
*** Indicate Empty Lines

=indicate-empty-lines= setting, when set to ~t~, highlights empty lines in the
buffer. Later, we will configure the automatic removal of empty lines.

#+begin_src emacs-lisp 
(setopt indicate-empty-lines t)
#+end_src

*** Cleanup White Spaces
:PROPERTIES:
:ID:       c955493b-ad4d-4661-ba0a-ad79ce52dbc4
:END:

=whitespace= is a /built-int/ Emacs package providing =whitespace-mode= that, when
activated, highlights white-spaces in buffers; the package also includes
=whitespace-cleanup-mode= which automatically removes white-spaces.

*N.B.* [[https://www.emacswiki.org/emacs/WhiteSpace][Emacswiki]] provides a nice overview of the settings.

=whitespace-style= setting specifies /which/ white-spaces are visualized:
  + face :: Visualize spaces by changing =face= color (instead of in table)
  + trailing :: Flag trailing white-space
  + lines-tail :: Columns beyond ~whitespace-line-column~ are
    highlighted via faces (must exclude =lines= in our configuration).
  + empty :: Flag empty lines (only at beginning/end of buffer)
  + indentation::space :: Flag ~TABs~ at beginning of lines
  + space-before-tab::tab :: Flag extra ~SPC~ before ~TAB~

*N.B.* =fill-column= previously set in [[id:6881fadb-9439-4939-974c-e50265bd8a0a][Buffer Column Width]] section.

#+begin_src emacs-lisp 
(use-package whitespace
  :hook ((prog-mode . whitespace-mode)
         (before-save . whitespace-cleanup)
         ;; Disable in 'org'; always flags long org-links
         (org-mode . (lambda () (whitespace-mode 0)))
         ;; Makefiles rely heavily on indentation and whitespace
         (makefile-mode . (lambda ()
                            (setq indent-tabs-mode t
                                  whitespace-mode nil)
                            (add-hook 'before-save-hook
                                      #'delete-trailing-whitespace))))
  :custom
  (whitespace-line-column fill-column "Highlight text beyond column")
  (whitespace-style '(face
                      trailing
                      lines-tail
                      empty
                      indentation::space
                      space-before-tab::tab))
  :config
  (global-whitespace-mode 0))
#+end_src

** Indentation
*** Indentation Width

=tab-width= setting specifies the number of spaces a single ~TAB~
represents. Alternatively, =standard-indent= setting sets the number of spaces
for Emacs commands that do not have a specific indentation width set. For
consistency, we define and set both variables to =my-indent-width=.

#+begin_src emacs-lisp 
(setq my-indent-width 4)
(setq-default tab-width my-indent-width
              standard-indent my-indent-width)
#+end_src

*** Tab Behavior
:PROPERTIES:
:ID:       925b16ea-4f78-49ca-93db-0012b84ca33f
:END:

=tab-always-indent= setting specifies the behavior of ~TAB~. This is particularly
relevant in programming modes. Setting to ~'complete~ results in ~TAB~ first
attempting to indent the line (if the line is already properly indented);
otherwise ~TAB~ will trigger code completion instead (if available).

#+begin_src emacs-lisp 
(setq-default tab-always-indent 'complete)
#+end_src

*** Indent Using Spaces

=indent-tabs-mode= is a /built-in/ minor-mode that, when activated, specifies that
indentation _can_ insert ~\t~ characters. Setting to ~nil~ deactivate the mode, thus
~\s~ is used; as recommended in the =PEP8= style guide, removing discrepancies that
may occur between different text editors or IDEs.

#+begin_src emacs-lisp 
(setq-default indent-tabs-mode nil)
#+end_src

** History
*** Window Layout History

=winner-mode= is a /built-in/ minor-mode that, when activated, tracks changes to
window layouts (ie splits, closing, resizing, etc). Changes are stored in
=winner-ring-alist=. The mode includes two functions for undoing and redoing
changes to the window:

+ winner-undo :: Default ~C-c <left>~ to revert window layout
+ winner-redo :: Default ~C-c <right>~ to redo the previously undone change

#+begin_src emacs-lisp 
(winner-mode 1)
#+end_src

*** Minibuffer History
:PROPERTIES:
:ID:       e010f1a6-c723-4ca1-bf39-62b3a9672797
:END:

=savehist-mode= is a /built-in/ minor-mode that, when activated, saves the
minibuffer history (ie commands, file-names, search history, etc) across Emacs
sessions. Minibuffer history saved in =savehist.el= (see =savehist-file= variable),
whose location is modified by the =no-litter= package (see [[id:a0a6ce0f-55d9-415f-a70c-48716e9d8c61][Tidy Emacs Directory]]).

*N.B.* Recommended by the creator of the =vertico.el= ([[https://github.com/minad/vertico][github/vertico]]).

#+begin_src emacs-lisp 
(savehist-mode 1)
#+end_src

*** Cursor Position History

=saveplace-mode= is a /built-in/ minor-mode that, when activated, saves the cursor
position in a given file; if previously visited, the cursor will move to the
last known position. Cursor positions saved in =save-place.el= (see
=save-place-file= variable), whose location is modified by the =no-litter= package
(see [[id:a0a6ce0f-55d9-415f-a70c-48716e9d8c61][Tidy Emacs Directory]]).

*N.B.* Suggested in [[https://www.jamescherti.com/essential-emacs-packages/][jamescherti.com]] blog-post.

#+begin_src emacs-lisp 
(save-place-mode 1)
#+end_src

** Prompting
*** Lazy Prompt Response

=use-short-answers= setting, when set to ~t~, allows users to respond to
confirmation prompts with simple ~y~ or ~n~ (instead of typing the full words).

The functions =yes-or-no-p= and =y-or-n-p= are effectively the same, however the
former requires full ~yes~ or ~no~ answers. Here, we effectively replace the
function with =y-or-no-p= so that single letter answers may be used across all
prompts.

*N.B.* Suggested in [[https://www.masteringemacs.org/article/disabling-prompts-emacs][masteringemacs.org]] article.

#+begin_src emacs-lisp 
(setopt use-short-answers t)
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Disable New File Confirmation

=confirm-nonexistent-file-or-buffer= setting, when set to ~nil~, disables user
confirmation before visiting a new file or buffer.

*N.B.* Suggested in [[https://www.masteringemacs.org/article/disabling-prompts-emacs][masteringemacs.org]] article.

#+begin_src emacs-lisp 
(setopt confirm-nonexistent-file-or-buffer nil)
#+end_src

*** CRM Prompt Indicator

The custom function ~crm-indicator~ adds an indicator to the completion prompt
when using ~completing-read-multiple~. This makes it easier to visualize multiple
inputs.

*N.B.* Suggested by the creator of the =vertico.el= package ([[https://github.com/minad/vertico][github/vertico]]).

#+begin_src emacs-lisp 
(defun my/crm-indicator (args)
  "Add indicator to completion promp when using 'completing-read-multiple'"
  (cons (format "[CRM%s] %s"
                (replace-regexp-in-string
                 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                 crm-separator)
                (car args))
        (cdr args)))

(advice-add #'completing-read-multiple :filter-args #'my/crm-indicator)
#+end_src

For example, calling the example function ~test-crm-indicator~ indicates that
selecting multiple options is both possible using a comma-separator.

*N.B.* src-block not tangled to configuration file.

#+begin_src emacs-lisp :tangle no
(defun test-crm-indicator ()
  "A custom function using completing-read-multiple."
  (interactive)
  (let ((choices '("Option A" "Option B" "Option C")))
    (completing-read-multiple "Choose options: " choices)))
#+end_src

*** Killing Buffer with Live Process

The following sidesteps the prompt that asks you if you want to kill a buffer
with a live process attached to it.

*N.B.* Suggested in [[https://www.masteringemacs.org/article/disabling-prompts-emacs][masteringemacs.org]] article.

#+begin_src emacs-lisp 
(setopt kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))
#+end_src

** Highlighting
:PROPERTIES:
:ID:       1ae14e20-459c-44ec-8c2a-b5f2f64116ac
:END:
:RELATED:
+ [[id:5e72d5f0-fdaf-491a-9a84-9806ee295d0a][Highlight TODOs]]
:END:

*** Cursor When Switching Buffers

=beacon= is an Emacs package providing =beacon-mode= minor-mode that, when
activated, highlights (flashes) the line containing the cursor when changing
current buffers.

#+begin_src emacs-lisp 
(use-package beacon
  :hook (after-init . beacon-mode))
#+end_src

*** Matching Delimiter Pairs

=paren= is a /built-in/ Emacs package providing =show-paren-mode= that, when
activated, highlights matching pairs of parentheses/delimiters when the cursor
is positioned at a delimiter. Several settings should be mentioned:

+ show-paren-style :: ~'parenthesis~ to only highlight delimiter
  - ~'expression~ highlights the entire enclosed text
+ show-paren-context-when-offscreen :: ~'overlay~
  - Overlay popup provides additional context if matching pair off screen

*N.B.* The /built-in/ minor-mode =electric-pair-mode= is also activated, which
automatically inserts a closing delimiter.

#+begin_src emacs-lisp 
(use-package paren
  :custom
  (show-paren-style 'parenthesis "Only highlight ()")
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t)
  ;; If cursor on ), show overlay for (
  (show-paren-context-when-offscreen 'overlay)
  :config
  (show-paren-mode 1)
  (electric-pair-mode 1))
#+end_src

*** Symbols/Things at Point

=highlight-thing= is an Emacs package providing =highlight-thing-mode= that, when
activated, automatically highlights all visible occurrences of the symbol/thing
at point.

#+begin_src emacs-lisp 
(use-package highlight-thing
  :demand t
  :hook ((prog-mode . highlight-thing-mode)
         (org-mode . highlight-thing-mode))
  :custom
  (highlight-thing-exclude-thing-under-point t)
  (highlight-thing-case-sensitive-p t)
  (highlight-thing-ignore-list
   '("False" "True", "return", "None", "if", "else", "self",
     "import", "from", "in", "def", "class")))
#+end_src

*** Line at Point

=global-hl-line-mode= is a /built-in/ minor-mode that, when activated, highlights
the current line (see related =hl-line-mode=).

#+begin_src emacs-lisp 
(global-hl-line-mode 1)
#+end_src

*** Pulse Killed Region

The custom function, copied from [[https://www.youtube.com/watch?v=oQ9JE9kRwG8][youtube/gopar]], highlights (pulses) the current
region and is executed before =kill-ring-save=, making it easier to visualize
what text/region is being copied.

#+begin_src emacs-lisp 
(defun gopar/pulse-current-region (&rest _)
  "Pulse the current implicit or active region"
  (if mark-active
      (pulse-momentary-highlight-region (region-beginning) (region-end))
    (pulse-momentary-highlight-region (mark) (point))))

(advice-add #'kill-ring-save :before #'gopar/pulse-current-region)
#+end_src

** Files + Encoding
*** Automatically Revert Buffer

=global-auto-revert-mode= is a /built-in/ minor-mode that, when activated,
automatically refreshes the contents of buffers after the visited file changes
on disk. This ensures buffers are automatically updated after changing =git=
branches.

#+begin_src emacs-lisp 
(global-auto-revert-mode)
#+end_src

*** Encoding

[[https://blog.hubspot.com/website/what-is-utf-8][UTF-8]] is central to the storage and encoding of text and files. Although other
encoding systems exist, =utf-8= is practically a standard, at least in the West,
and so it is important that we instruct Emacs to treat files as UTF-8 by
default. For more information, read [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][MasteringEmacs]].

#+begin_src emacs-lisp 
;; https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs
(set-default-coding-systems 'utf-8)

;; https://github.com/Thaodan/emacs.d
(define-coding-system-alias 'UTF-8 'utf-8)
#+end_src

** Boookmarks

=bookmark= is a /built-in/ Emacs package providing users the ability to efficiently
store and access specific locations in frequently visited files. Bookmarks are
saved in =bookmarks-default.el= (see =bookmark-file= variable), whose location is
modified by the =no-litter= package (see [[id:a0a6ce0f-55d9-415f-a70c-48716e9d8c61][Tidy Emacs Directory]]).

Frequently used functions include:

+ bookmark-set :: ~C-x r m~; Set bookmark at current location
  - Prompt user for desired name of bookmark
  - Bookmarked locations indicated by flag in fringe of buffer
  - Bookmark details stored in =bookmark-alist=

+ bookmark-jump :: ~C-x r b~; Select bookmark and jump to location

+ bookmark-save :: Export =bookmark-alist= to specified file

+ bookmark-delete :: Delete bookmark in =bookmark-alist=

+ bookmark-bmenu-list :: Open buffer containing all bookmarks

*N.B.* Related, the =register= package is a temporary alternative where locations
are assigned to a single character (and do not persist in memory). Something to
explore in the future.

#+begin_src emacs-lisp 
(use-package bookmark
  :custom
  (bookmark-save-flag t "Save bookmarks when Emacs killed")
  (bookmark-fringe-mark t "Non-nil to show icon in fringe"))
#+end_src

** Images
:PROPERTIES:
:ID:       0bdd31cb-56e6-4709-8294-a6c701dad660
:END:
:RELATED:
+ [[id:c934464b-8b3c-4203-ac56-d916e21d470c][Images in Org]]
:END:

*** Automatically Display Image Files

=auto-image-file-mode= is a /built-in/ minor-mode that, when activated,
automatically displays image files when opened.

#+begin_src emacs-lisp 
(auto-image-file-mode 1)
#+end_src

** Ediff

=ediff-split-window-function= setting controls how Emacs splits the window when
displaying two files or buffers in =ediff=. Setting to ~'split-window-horizontally~
ensures that the buffers are side by side from each other.

=ediff-window-setup-function= setting controls how =ediff= mananges the window
layout in Emacs. Setting to ~'ediff-setup-windows-plain~ ensures that both =ediff=
windows are open in the current Emacs frame.

#+begin_src emacs-lisp 
(setopt ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

** Custom Functions
:PROPERTIES:
:ID:       8f4885df-ad58-432b-a6cd-1f4524bfc868
:END:
:RELATED:
+ [[id:d831e4e4-e9b1-480e-aa1a-a152d9707275][General.el]]
:END:

*** Jump to Configuration README.org

See ~M-x crux-find-user-init-file~ to open =init.el=.

#+begin_src emacs-lisp 
(defun my/find-config-file ()
  "Open 'README.org' in other window."
  (interactive)
  (find-file-other-window (concat user-emacs-directory "README.org")))
#+end_src

*** Evaluate init.el

#+begin_src emacs-lisp 
(defun my/eval-init ()
  "To quickly reload the 'init.el' file."
  (interactive)
  (load-file user-init-file))
#+end_src

** Provide init-emacs.el

#+begin_src emacs-lisp
(provide 'init-emacs)
;;; init-emacs.el ends here
#+end_src

* UI
:PROPERTIES:
:header-args: :tangle modules/init-ui.el
:END:

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init-ui.el")>>
#+end_src

** Themes
*** Load Theme Advice

Emacs themes specify the colors of various ~custom-set-faces~. When switching
between themes, some parts of the old theme remain if the new theme does not
specify the same faces. It is possible to avoid this issue by disabling the
current theme before switching.

#+begin_src emacs-lisp 
;; https://www.unwoundstack.com/blog/switching-emacs-themes.html
(define-advice load-theme (:before (&rest _args) theme-dont-propagate)
  (mapc #'disable-theme custom-enabled-themes))
#+end_src

*** Doom Themes
:PROPERTIES:
:ID:       671dbaef-69f8-4ea6-870f-a72ebf5e13d7
:END:

=doom-themes= is an Emacs package containing a number of Emacs themes.

#+begin_src emacs-lisp 
;; Effectively copied from https://github.com/doomemacs/themes
(use-package doom-themes
  :ensure t
  :config
  (setopt doom-themes-enable-bold t
          doom-themes-enable-italic t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

*** Custom Theme Functions

These functions make it easier to switch between light- and dark-themes.

#+begin_src emacs-lisp 
(defun light ()
  (interactive)
  (load-theme 'doom-tomorrow-day t))

(defun dark ()
  (interactive)
  (load-theme 'doom-one t))
#+end_src

*** Set Default Theme

Below we defined the theme available at startup.

#+begin_src emacs-lisp 
(dark)
#+end_src

** Fonts
:PROPERTIES:
   :ID:       a33827ca-f51c-4ad3-90e3-2b2d894c3d48
   :END:

*** Font Style

In Emacs, fonts can be customized to improve readability and visually organize
different content types such as code, prose, or user interfaces. Three common
font types include:

+ default :: Primary font used if no other specifications are provided
+ fixed-pitch :: Mono-spaced (fixed-width) text typically used in programming
+ variable-pitch :: Proportional fonts often used in =org-mode=

This configuration uses the =Jetbrains Mono= font, which is manually downloaded
from [[https://www.jetbrains.com/lp/mono/][jetbrains.com]]. The font was installed by following the [[https://www.jetbrains.com/lp/mono/#how-to-install][how-to]] instructions
verbatim.

#+begin_src emacs-lisp 
;; https://github.com/daviwil/dotfiles/blob/guix-home/.emacs.d/modules/dw-core.el#L124
(set-face-attribute 'default nil
                    :font "JetBrains Mono"
                    :height 100
                    :weight 'medium)

(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :height 100
                    :weight 'medium)

(set-face-attribute 'variable-pitch nil
                    :font "JetBrains Mono"
                    :height 100
                    :weight 'medium)
#+end_src

*** Font Size

In Emacs, the face attribute ~:height~ is a measurement in units of ~0.1~ of a
point. For example, setting the height to ~120~ means a 12-point =font-size=. The
custom function =set-font-size= enables the user to change the font w.r.t. the
more common =font-size=.

#+begin_src emacs-lisp 
;; Modified from https://stackoverflow.com/a/50052751
(defun font-size (fontsize)
  "Set the font-pt size."
  (interactive "nFont size: ")
  (let* ((font-height (* 10 fontsize)))
    (set-face-attribute 'default nil :height font-height)
    (set-face-attribute 'fixed-pitch nil :height font-height)
    (set-face-attribute 'variable-pitch nil :height font-height)))

;; Font size at startup
(font-size 10)
#+end_src

** Icons

=nerd-icons= is an Emacs package that provides icons for use in Emacs
buffers. The use of icons improve readability, for example in the minibuffer
icons are displayed next to the file name indicating whether the file is an
=org=, =python=, or =elisp= file.

#+begin_src emacs-lisp 
(use-package nerd-icons
  :config
  ;; Download nerd-icons if directory not found
  (unless (car (file-expand-wildcards
                (concat user-emacs-directory "elpa/nerd-icons-*")))
    (nerd-icons-install-fonts t)))

;; Icons inside mini-buffer
(use-package nerd-icons-completion
  :after (marginalia nerd-icons)
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

;; Icons inside 'dired' buffers
(use-package nerd-icons-dired
  :after (dired nerd-icons)
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src

** Modeline
*** Mood-line

=doom-modeline= is the most feature-rich mode-line package for Emacs. For some
reason the right end of the mode-line would be cut off so I could not see the
repo name. Instead, defer to =mood-line=, the lightweight alternative to
=doom-modeline=.

#+begin_src emacs-lisp
;; (use-package doom-modeline
;;   :config (doom-modeline-mode 1)
;;   :custom
;;   ;; Display project_name/../file_name
;;   (doom-modeline-buffer-file-name-style 'truncate-with-project)
;;   (doom-modeline-buffer-encoding nil "Dont care about UTF-8 badge")
;;   (doom-modeline-vcs-max-length 30   "Limit branch name length")
;;   (doom-modeline-enable-word-count t "Turn on wordcount"))

(use-package mood-line
  :hook (after-init . mood-line-mode)
  :custom
  (mood-line-glyph-alist mood-line-glyphs-fira-code)
  (mood-line-format
   (mood-line-defformat
    :left
    (((mood-line-segment-modal)                  . " ")
     ((or (mood-line-segment-buffer-status) " ") . " ")
     ((mood-line-segment-project) . "/")
     ((mood-line-segment-buffer-name)            . "\t\t")
     ((mood-line-segment-cursor-position)        . " | ")
     ((mood-line-segment-scroll)                 . "\t\t")
     ((mood-line-segment-anzu)                   . "  "))
    :right
    (((mood-line-segment-major-mode) . "  ")
     ((mood-line-segment-vc)         . "  ")
     ((mood-line-segment-misc-info)  . "  ")
     ((mood-line-segment-checker)    . "  ")
     ((mood-line-segment-process)    . "  ")))))
#+end_src

*** Display Column Numbers

#+begin_src emacs-lisp 
(column-number-mode t)
#+end_src

*** Display Line Numbers

#+begin_src emacs-lisp 
(line-number-mode t)
#+end_src

*** Display Search Matches

=anzu= is an Emacs package providing =anzu-mode= that, when activated, displays the
total number of =isearch= matches (and current match position) in the mode-line.

#+begin_src emacs-lisp 
(use-package anzu
  :hook (emacs-startup . global-anzu-mode)
  :custom
  (anzu-search-threshold 1000 "Limit n words searched to reduce lag")
  (anzu-replace-threshold 50 "Limit n replacement overlay to reduce lag")
  (anzu-minimum-input-length 2 "Increase activation threshold to reduce lag")

  ;; Cleanup mode-line information
  (anzu-mode-lighter "" "Remove mode-name from results")
  (anzu-replace-to-string-separator "")

  :bind (;; Keybindings M-% and C-M-% do not change
         ([remap query-replace] . anzu-query-replace)
         ([remap query-replace-regexp] . anzu-query-replace-regexp)

         :map isearch-mode-map
         ;; Use Anzu-mode for replacing from isearch results (C-s or C-f)
         ([remap isearch-query-replace] . anzu-isearch-query-replace)
         ([remap isearch-query-replace-regexp] . anzu-isearch-query-replace-regexp)))
#+end_src

*** Display Current Function

#+begin_src emacs-lisp
;; Display current function() in mode-line
(use-package which-func
  :commands which-function-mode
  :hook (prog-mode . which-function-mode))
#+end_src

** Spacious Padding

=spacious-padding-mode= increases the space or "padding" around several elements
of the Emacs interface, such as window dividers, the internal frame border, and
padding of the mode-line, and more. The idea is to produce a more comfortable
presentation.

#+begin_src emacs-lisp
(use-package spacious-padding
  :hook (after-init . spacious-padding-mode)
  :custom
  (spacious-padding-widths
   '( :internal-border-width 10 ;; Space between frame & contents
      :right-divider-width 10   ;; Space between side-by-side windows
      :fringe-width 8           ;; Fringe on either side of window
      :header-line-width 4      ;; Space surrpounding 'header-line'
      :mode-line-width 2        ;; Space surrounding 'mode-line'
      :scroll-bar-width nil))   ;; 'scroll-bar' disabled
  (spacious-padding-subtle-mode-line t))
#+end_src

** Provide init-ui.el

#+begin_src emacs-lisp 
(provide 'init-ui)
;;; init-ui.el ends here
#+end_src

* Org-Mode
:PROPERTIES:
:ID:       1360c936-229c-44fd-b71c-30f66960d23a
:header-args: :tangle modules/init-org.el
:END:

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init-org.el")>>
#+end_src

** General Settings

#+begin_src emacs-lisp 
(use-package org
  :demand t
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :hook ((org-src-mode . whitespace-cleanup)
         ;; Automatic break line at 'current-fill-column' (line wrapping)
         (org-mode . turn-on-auto-fill))
  :custom
  (org-ellipsis " " "Default to 'org-modern'")
  (org-startup-folded t "Always fold headers")
  (org-startup-indented t "Visually indent at startup")
  (org-adapt-indentation t "Align contents with heading")
  (org-element-use-cache nil "Avoid 'org-element--cache' error")
  (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
#+end_src

** Org Table of Contents

=org-make-tock= is an Emacs package providing =org-make-toc-mode= that, when
activated, generates a "Table of Contents" (=TOC=) for =org= files. This makes it
easier to navigate large documents. Calling ~org-make-toc-insert~ adds a custom
~:TOC:~ property to the current header. The function ~org-make-toc~ updates the =TOC=
in the current buffer.

#+begin_src emacs-lisp 
(use-package org-make-toc
  :after org
  :hook ((org-mode . org-make-toc-mode)
         (org-mode . (lambda ()
                       ;; 'nil' specifies that this is not a "local" addition
                       ;; 't' ensures the hook is buffer-local
                       (add-hook 'before-save-hook #'org-make-toc nil t)))))
#+end_src

** Org UI
*** Modernize UI in Org-Mode

=org-modern= is an Emacs package providing =org-modern-mode= that, when activated,
adds a more modern and polished look to =org= buffers.

#+begin_src emacs-lisp 
(use-package org-modern
  :after org
  :init (global-org-modern-mode)
  :hook ((org-mode                 . org-modern-mode)
         (org-agenda-finalize-hook . org-modern-agenda))
  :commands (org-modern-mode org-modern-agenda))
#+end_src

*** Hide Emphasis Markers

By default, =Doom Themes= stylizes text surrounded by emphasis markers (see [[id:671dbaef-69f8-4ea6-870f-a72ebf5e13d7][Doom
Themes]]). As such, it is not necessary to display the emphasis markers. The
minor-mode =org-appear-mode= reveals the markers if the cursor moves in between
marker pairs.

#+begin_src emacs-lisp 
(setopt org-hide-emphasis-markers t)

(use-package org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :custom (org-appear-inside-latex t))
#+end_src

** Org Behavior
*** Speed Commands

=org-use-speed-commands= settings controls whether certain single-key shortcuts
known as /speed commands/ are enabled when the cursor is at the beginning of a
headline. Below, we set the value to a custom lambda function (copied from
[[https://www.reddit.com/r/orgmode/comments/ded3g8/comment/f2x1u1o/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button][reddit]]) that enables the use of speed commands if cursor is on _any_ of the
leading stars.

*N.B.* If ~non-nil~, move cursor to start of any headline and call ~?~ to view list
of available speed commands.

#+begin_src emacs-lisp 
;; ? speed-key opens Speed Keys help.
(setopt org-use-speed-commands
      (lambda ()
        (and (looking-at org-outline-regexp)
             (looking-back "^\**"))))
#+end_src
*** Auto-Tangle

=org-auto-tangle-mode=, when activated, automatically tangles =org=-files on
save. Automatically tangling can be annoying, so we set ~org-auto-tangle-default
nil~. Therefore, automatic tangling only occurs if =#+auto_tangle: t= is added to
the file header.

#+begin_src emacs-lisp
(use-package org-auto-tangle
  :after org
  :hook (org-mode . org-auto-tangle-mode)
  :custom (org-auto-tangle-default nil))
#+end_src

*** Archive

These are previous settings that I am not sure whether I want to include in
this configuration.

#+begin_src emacs-lisp :tangle no
;; 'C-a/e' jump to start-end of headline text
(setopt org-special-ctrl-a/e t)

;; 'C-k' behave different on headline text
(setopt org-special-ctrl-k t)

;; Do not delete hidden subtree with 'C-k'
(setopt org-ctrl-k-protect-subtree t)
#+end_src

** Org Babel
*** Languages

=org-babel-load-languages= setting specifies the languages which can be evaluated
in =org= buffers, which must be loaded using the function
~org-babel-do-load-languages~.

#+begin_src emacs-lisp 
(org-babel-do-load-languages 'org-babel-load-languages
                             '((emacs-lisp . t)
                               (shell . t)))
#+end_src

*** Add Org-Block Templates

An =org-block= is a special section of text and possess syntax that distinguish
it from the surrounding content. Though there are many types of =org-blocks=,
they all share the same structure and start/end with ~#+BEGIN_<type>~ and
~#+END_<type>~.

Due to the shared structure, it is possible to define custom blocks via the
=org-structure-template-alist= setting and insert by calling
=org-insert-structure-template= (~C-c C-,~). Here, we define a few block templates
we anticipate using frequently.

#+begin_src emacs-lisp 
(setopt org-structure-template-alist
        '(("x" . "example")
          ("q" . "quote")
          ("e" . "src emacs-lisp")
          ("m" . "src emacs-lisp :tangle modules/init-XXX.el")
          ("s" . "src sh")
          ("p" . "src python")))
#+end_src

*** Turn Off Confirmation

=org-confirm-babel-evaluate= setting, when set to ~t~, prompts the user to confirm
whether they intended to evaluate the code block. *Annoying*.

#+begin_src emacs-lisp 
(setopt org-confirm-babel-evaluate nil)
#+end_src

*** Org-Edit-Special Buffer
**** Preserve Indentation

=org-src-preserve-indentation= setting, when set to ~t~, remove leading whitespace
automatically inserted when exiting the =org-edit-special= buffer.

#+begin_src emacs-lisp 
(setopt org-src-preserve-indentation t)
#+end_src

**** Window Setup

=org-src-window-setup= setting controls how the source code edit buffer is
displayed. Setting to ~'current-window~ ensures that the widow always opens in
the current buffer.

#+begin_src emacs-lisp 
(setopt org-src-window-setup 'current-window)
#+end_src

**** Turn off Exit Prompt

=org-src-ask-before-returning-to-edit-buffer= setting, when ~t~, prompts the user
before returning to an active source code editing buffer. This prevents
conflicting changes should the user switch back to the current buffer and make
changes to the =src-block= of an active =org-edit-special= buffer.

#+begin_src emacs-lisp 
(setopt org-src-ask-before-returning-to-edit-buffer t)
#+end_src

*** FIX: Display ANSI Error Colors

#+begin_src emacs-lisp 
;; https://github.com/emacs-jupyter/jupyter/issues/366
(defun display-ansi-colors ()
  (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

** Images in Org
:PROPERTIES:
:ID:       c934464b-8b3c-4203-ac56-d916e21d470c
:END:
:RELATED:
+ [[id:0bdd31cb-56e6-4709-8294-a6c701dad660][Images]]
:END:
*** Show Inline Images At Open

=org-startup-with-inline-images= setting, when set to ~t~, displays inline images
when opening an =org= file. If ~nil~, only the links are displayed in the =org=
buffer.

#+begin_src emacs-lisp 
(setopt org-startup-with-inline-images t)
#+end_src

*** Display Inline Remote Images

=org-display-remote-inline-images= setting controls whether images from remote
URLs (like websites) are displayed inline. Setting to ~'cache~ caches inline
images such that re-opening the file does not require re-downloading the
images.

#+begin_src emacs-lisp 
(setopt org-display-remote-inline-images 'cache)
#+end_src

*** Refresh Images After Executing Code

Figures generated in src-blocks are not refreshed automatically. The following
changes ensure that the shown image is the "latest" version of that figure.

#+begin_src emacs-lisp 
(add-hook 'org-babel-after-execute-hook
          (lambda () (org-display-inline-images nil t)))
#+end_src

** Org-Agenda
:PROPERTIES:
:ID:       e62f2c9a-f7fa-4972-afc6-b0dd072d6474
:END:

/How do you organize related TODO items?/

One option is to organize related TODOs under a top-level =org-header= per
project. This would not affect the templates as it is possible to "re-file"
your note by calling ~M-x org-refile~ (~C-c C-w~) instead of ~C-c C-c~. However, this
would affect the =agenda-view= -- the project-level header would be included in
the view, when we really only care about the sub-headers.

Another option is to add a ~:project:~ property in the templates and group
related items using the =org-super-agenda= package. _For now, lets use this
option_. *N.B.* This will require custom functions (see [[id:45a1842a-9f6a-4432-a8cf-ff6c8f217a76][Custom Capture Functions]]).

*** Define Agenda Files
:PROPERTIES:
:ID:       deba8136-212c-4e6a-916c-2f05c180b4f5
:END:

=org-agenda-files= setting defines the files/directories (of files) to be used
for agenda display.

=Org-capture= templates are used to quickly write and save notes in specified
=org-files=. However, the file must be provided as a string and not the output of
some function like ~concat~ (templates are defined in [[id:f5222055-3b85-42fd-8b6f-0f170f75b681][Agenda Capture
Templates]]). Therefore, we create the custom variables ~my-agenda-dir~ and
~my-emacs-agenda~.

#+begin_src emacs-lisp 
(defconst my-agenda-dir (concat my-persist-dir "agendas/"))
(defconst my-emacs-agenda (concat my-agenda-dir "agenda_emacs.org"))

(setopt org-agenda-files (list my-agenda-dir))
#+end_src

*** Agenda Capture Templates
:PROPERTIES:
:ID:       f5222055-3b85-42fd-8b6f-0f170f75b681
:END:

**** Custom Capture Functions
:PROPERTIES:
:ID:       45a1842a-9f6a-4432-a8cf-ff6c8f217a76
:END:

Capture templates can be made generalizable by including function calls within
the string template. It is unlikely that I will be able to remember project
names that exist in the previously defined TODO items. Instead, the following
custom functions collect existing project names in a given file and suggest
them when filling in the template.

#+begin_src emacs-lisp 
(defun org-capture--get-project-entry-from-file (agenda-file-name)
  "Compile list of project names from org-headers in FILE that
contain the :project: property"
  (let (project-names)
    (with-current-buffer (find-file-noselect agenda-file-name)
      (goto-char (point-min))
      (while (re-search-forward "^\\*+ " nil t)
        (when (and (org-entry-get nil "project")
                   (not (org-entry-is-done-p)))
          (add-to-list 'project-names (org-entry-get nil "project")))))
    project-names))

(defun org-capture--select-project-entry (agenda-file-name)
  "Prompt user to select :project: property from FILE"
  (let ((projects (org-capture--get-project-entry-from-file agenda-file-name)))
    (completing-read "Select project:" projects nil nil)))
#+end_src

**** Templates

*N.B.* To avoid repeating the same file-path, agenda files are defined as
variables in [[id:deba8136-212c-4e6a-916c-2f05c180b4f5][Define Agenda Files]].

#+begin_src emacs-lisp 
(setq org-capture-templates
      '(("e" "Emacs Config Task" entry (file my-emacs-agenda)
         "* TODO %^{Task} %^g
:PROPERTIES:
:project: %(org-capture--select-project-entry my-emacs-agenda)
:END:
:LOGBOOK:
- State \"TODO\"       from              %U

  %?
:END:"
         :empty-lines 1
         :kill-buffer t)))
#+end_src

*** Agenda Window Behavior

=org-agenda-window-setup= setting specifies how the agenda buffer should be
displayed. Setting ~'only-window~ shows the agenda in in full screen. Setting
=org-agenda-restore-windows-after-quit= to ~t~ restores the window configuration
after exiting the agenda view.

#+begin_src emacs-lisp 
(setopt org-agenda-window-setup 'only-window
        org-agenda-restore-windows-after-quit t)
#+end_src

*** Agenda Log Settings

In =org=, it is possible to track TODO state changes on a per-keyword basis by
adding ~!~ and/or ~@~ to record a timestamp or note, respectively.

=org-log-into-drawer= setting, when set to ~t~, stores logs in a =drawer= below the
heading. This improves readability by separating state-change notes in a
separate (collapsible) area. Setting =org-log-states-order-reversed= to ~nil~ means
the latest note entry will be located at the bottom of the list.

#+begin_src emacs-lisp 
(setopt org-log-into-drawer t
        org-log-states-order-reversed nil)
#+end_src

*** Agenda TODO Settings
**** Fast TODO Selection
:PROPERTIES:
:ID:       bc0babe0-495f-4c4d-bedc-3e079930e57a
:END:

=org-use-fast-todo-selection= setting, when set to ~'auto~, enables the fast
selection of TODO states; calling ~M-x org-todo~ (~C-c C-t~) will open a pop-up
menu showing the available TODO keywords, each assigned to a specific key.

#+begin_src emacs-lisp 
(setopt org-use-fast-todo-selection 'auto)
#+end_src

*** Agenda TAG Settings
**** Fast Tag Selection

Similar to [[id:bc0babe0-495f-4c4d-bedc-3e079930e57a][Fast TODO Selection]], setting =org-use-fast-tag-selection= to ~'auto~
opens a TAG pop-um menu when calling ~M-x org-set-tags-command~ (~C-c C-q~).

#+begin_src emacs-lisp 
(setopt org-use-fast-tag-selection 'auto)
#+end_src

**** Align Tags

=org-auto-align-tags= setting, when set to ~t~, keeps tags aligned when modifying
headlines.

#+begin_src emacs-lisp 
(setopt org-auto-align-tags t)
#+end_src

*** Agenda View
**** Hide Tags in Agenda View

=org-agenda-remove-tags= setting, when set to ~t~, removes tags from the headline
copy in the agenda.

#+begin_src emacs-lisp 
(setopt org-agenda-remove-tags t)
#+end_src

**** Modernize Org-Agenda

=org-super-agenda= is an Emacs package providing =org-super-agenda-mode= that, when
activated, enhances the =agenda-view= via customize-able grouping and filtering
options (implemented in [[id:dd0e3646-9554-4b81-89cc-e48e2dd485bc][Agenda Custom Commands]]).

#+begin_src emacs-lisp 
(use-package org-super-agenda
  :defer t
  :after org
  :hook (org-agenda-mode . org-super-agenda-mode)
  :custom (org-super-agenda-header-prefix "❯ ")
  :config
  (set-face-attribute 'org-super-agenda-header nil :weight 'bold))
#+end_src

**** Agenda Custom Commands
:PROPERTIES:
:ID:       dd0e3646-9554-4b81-89cc-e48e2dd485bc
:END:

#+begin_src emacs-lisp 
(setq org-agenda-custom-commands
      '(("e" "Personal Emacs Tasks"
         ((alltodo "" ((org-agenda-overriding-header "Emacs TODOs")
                       (org-super-agenda-groups '((:discard (:not (:tag ("personal" "emacs"))))
                                                  (:discard (:tag "work"))
                                                  (:auto-property "project")))))))))
#+end_src

** Provide init-org.el

#+begin_src emacs-lisp
(provide 'init-org)
;;; init-org.el ends here
#+end_src

* Completion
:PROPERTIES:
:header-args: :tangle modules/init-completion.el
:END:

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init-completion.el")>>
#+end_src

** Vertico
:RELATED:
+ Recommended by =vertico= author ::
  - [[id:e010f1a6-c723-4ca1-bf39-62b3a9672797][Minibuffer History]]
  - [[id:dfe5aad6-6c0b-4e06-8c83-028a59bb9ad1][Recursive Minibuffer]]
  - [[id:bbc9b953-b553-4928-a0ef-daf6df48a1f8][Read-only Minibuffer]]
  - [[id:51c833dd-b403-40e5-8359-f3b6f15193ff][Close Minibuffer Regardless of Point Location]]
+ [[id:8a9a6083-929e-4329-b009-c33529b0e5a7][Spell Checking]]:: Uses =vertico-multiform= for =jinx= recommendations
:END:

=vertico= is an Emacs package providing =vertico-mode= that, when activated,
provides an efficient completion framework that enhances Emacs' built-in
minibuffer completion. Completion candidates are displayed vertically in the
minibuffer.

The package includes several extensions:

+ vertico-directory :: Convenient directory navigation commands
+ vertico-repeat :: Command to repeat last completion session
+ vertico-grid :: Display candidates in grid, not as list
+ vertico-multiform :: Control display of candidates per mode

*N.B.* Author recommends activating =savehist-mode= to store previous completion
candidates (see [[https://github.com/minad/vertico][github/vertico]]).

#+begin_src emacs-lisp 
(use-package vertico
  ;; :init recommended by author
  :init (vertico-mode)
  :custom
  (vertico-cycle t "Return to top of list")
  (vertico-count 10 "N candidate suggestions")
  ;; Save 'vertico' session for 'vertico-repeat' extension
  :hook (minibuffer-setup . vertico-repeat-save))

;; Copied from https://github.com/minad/vertico?tab=readme-ov-file
(use-package vertico-directory
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** Orderless

=orderless= is an Emacs package that enhances completion style in the minibuffer
by allowing flexible, non-sequential matching on input patters. For example, if
we are searching for a buffer named =project-report.txt=, entering ~report txt
project~ would return the expected file instead of typing out the complete name.

#+begin_src emacs-lisp 
;; Copied from https://github.com/oantolin/orderless/tree/master
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Marginalia

=marginalia= is an Emacs package providing =marginalia-mode= that, when activated,
enhances completion by providing additional annotation and contextual
information alongside candidates. In the minibuffer, for example, =marginalia=
will add file size or date modified.

#+begin_src emacs-lisp 
(use-package marginalia
  :init (marginalia-mode 1))
#+end_src

** Consult
:PROPERTIES:
:ID:       8b393fcc-9d43-4afb-b249-9a72bc6089ea
:END:
:RELATED:
+ [[id:614d6cd5-6eb8-40cc-8ed1-538bcdca253d][Consult-Denote Extension]]
:END:

=consult= is an Emacs package that provides a powerful and flexible completion
and selection framework that streamlines various interactive commands. For
example, calling ~consult-buffer~ will preview the buffer as completion options
are scrolled over in the minibuffer.

#+begin_src emacs-lisp 
;; Copied from https://github.com/minad/consult
(use-package consult
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setopt register-preview-delay 0.5
          register-preview-function #'consult-register-format)
  ;; Optionally tweak the register preview window. This adds thin lines,
  ;; sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setopt xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

  :config
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis udsing the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key '("M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setopt consult-narrow-key "<")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setopt consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setopt consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setopt consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setopt consult-project-function (lambda (_) (projectile-project-root))))
  )
#+end_src

** Provide init-completion.el

#+begin_src emacs-lisp 
(provide 'init-completion)
;;; init-completion.el ends here
#+end_src

* DIRED
:PROPERTIES:
:header-args: :tangle modules/init-dired.el
:END:

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init-dired.el")>>
#+end_src


** Dired

=dired=, short for "DIsk REDitor", is a /built-in/ Emacs package providing an
interface for file and directory management. With =dired=, it is possible to
navigate directories, view file details, and perform a wide range of file
operations directly within Emacs.

#+begin_src emacs-lisp 
(use-package dired
  :ensure nil
  :commands dired
  :custom
  ;; -A :: Show hidden files but omit implied '.' and '..' targets
  ;; -h :: Make file sizes human-readable
  ;; -l :: Produce long=g, detailed listing (required by 'dired')
  ;; -v :: Sort file by version number
  ;; --group-directories-first :: List directories at top of buffer
  ;; --time-style=long-iso     :: List %Y-%m-%d %H:%M
  (dired-listing-switches (concat "-Ahlv"
                                  " --group-directories-first"
                                  " --time-style=long-iso"))

  ;; Refresh 'dired' buffer if directory changes
  (dired-auto-revert-buffer #'dired-buffer-changed-p)

  ;; If two 'dired' buffers open side-by-side, Emacs will suggest the
  ;; other buffer directory when moving files
  (dired-dwim-target t)

  :config
  ;; The variable 'dired-kill-when-opening-new-dired-buffer'
  ;; exists. However, there are use-cases for having multiple 'dired'
  ;; buffers open at the same time (see 'dired-dwim-target').
  (defun jh/dired-kill-all-buffers ()
    "Delete all open 'dired'-mode buffers."
    (interactive)
    (jh/kill-buffers-by-mode 'dired-mode)))
#+end_src

** Extended Dired Features

=dired-x= is a /built-in/ Emacs package providing extended and optional features to
=dired= including, but not limited to:

+ Omitted files :: =dired-omit-mode= tidies the =dired= buffer by hiding files
  based on regex patterns

+ Jumping to files :: Adds commands to quickly jump to files or directories in
  a project

#+begin_src emacs-lisp 
(use-package dired-x
  :ensure nil
  :after dired
  ;; ':commands dired' removed in commit 67d0400
  :custom
  ;; Files to ignore in 'dired' buffer.
  (dired-omit-files (concat "\\`[.]?#\\|\\`[.][.]?\\'"
                            "\|"
                            (rx (or (: bos (or "\.DS_Store"
                                               "__MACOSX"
                                               "\.git")
                                       eos)
                                    (: bos "__pycache__")
                                    ".ipynb_checkpoints"
                                    "\.~.*#"))))
  :config
  ;; Must activate 'dired-omit-mode' to omit 'dired-omit-files'.
  (add-hook 'dired-after-readin-hook 'dired-omit-mode))
#+end_src

** Auxiliary Dired Functions

=dired-aux= is a /built-in/ Emacs package providing auxiliary functions in
=dired=. The additional functionality includes, but is not limited to:

+ Bulk operations :: Handle operations on multiple files more robustly, such as
  renaming and copying

+ File compression and decompression :: Adds commands for compressing and
  decompressing files directly from a =dired= buffer

+ Backup and auto-save file cleanup :: Includes features to clean up backup
  files and other temporary files more effectively

#+begin_src emacs-lisp 
(use-package dired-aux
  :ensure nil
  :after dired
  :commands dired
  :bind (:map dired-mode-map
              ;; 'f' calls 'dired-find-file'
              ("F" . dired-create-empty-file))
  :custom
  (dired-do-revert-buffer t "Revert buffer after any 'dired-do' operations"))
#+end_src

** Writable Dired Buffers

=wdired= is a /built-in/ Emacs package providing the ability to make =dired=-buffers
_writable_. In other words, it is possible to edit file and directory names as if
they are regular text. This is advantageous for quickly renaming multiple
files.

#+begin_src emacs-lisp 
(use-package wdired
  :ensure nil
  :after dired
  :commands dired
  :custom
  ;; Change permission using 'SPC'
  (wdired-allow-to-change-permissions t))
#+end_src

** Provide init-dired.el

#+begin_src emacs-lisp 
(provide 'init-dired)
;;; init-dired.el ends here
#+end_src

* Development
:PROPERTIES:
:header-args: :tangle modules/init-dev.el
:END:

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init-dev.el")>>
#+end_src

** Rainbow Delimiters

=rainbow-delimiters= is an Emacs package providing =rainbow-delimiters-mode= that,
when activated, improves code readability by visually distinguishing pairs of
delimiters using different colors.

#+begin_src emacs-lisp 
(use-package rainbow-delimiters
  :hook (prog-mode))
#+end_src

** Highlight TODOs
:PROPERTIES:
:ID:       5e72d5f0-fdaf-491a-9a84-9806ee295d0a
:END:
:RELATED:
+ [[id:1ae14e20-459c-44ec-8c2a-b5f2f64116ac][Highlighting]]
:END:

=hl-todo= is an Emacs package providing =hl-todo-mode= that, when activated,
highlight TODO keywords in text files. Since =org= includes TODO tags, we will
only activate in =prog-mode=.

*Notable functions:*
+ hl-todo-next :: Jump to next TODO-keyword
+ hl-todo-previous :: Jump to previous TODO-keyword
+ hl-toqdo-occur :: Open ibuffer of all occurrences

#+begin_src emacs-lisp 
(use-package hl-todo
  :hook (prog-mode)
  :custom
  (hl-todo-keyword-faces
   '(("TODO"   . "#FFBF00")
     ("FIXME"  . "#DE3163"))))
#+end_src

** Expand Region Selection

=expand-region= is an Emacs package that provides the ability to incrementally
expand a selected region of text. Calling ~er/expand-region~ selects an initial
region; ~=~ and ~-~ can then be used to expand or contract the selected region.

*N.B.* The package includes =python-mode-expandsions.el= and other modules that may
be of interest.

#+begin_src emacs-lisp 
(use-package expand-region
  :commands er/expand-region
  :bind ("C-=" . er/expand-region))
#+end_src

** Project Navigation

=projectile= is an Emacs package providing =projectile-mode= that, when activated,
provides functionality to more quickly navigate, manage, and work with files
within a repository.

#+begin_src emacs-lisp 
;; To provide project management + navigation features
(use-package projectile
  :init (projectile-mode 1)
  :custom
  ;; Cache to prevent slow 'projectile-find-file' on larger projects
  (projectile-enable-caching t)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src

** Version Control
*** Magit

=magit= is an Emacs package that provides a text-based user interface to =git=
(otherwise referred to as a "git porcelain"). See [[https://magit.vc/][magit.vc]] for documentation.

#+begin_src emacs-lisp 
(use-package magit
  :bind ("C-x g" . magit-status)
  :diminish magit-minor-mode
  :hook (git-commit-mode . (lambda () (setq fill-column 72)))
  :mode ("/\\.gitmodules\\'" . conf-mode)
  :custom
  ;; hide ^M chars at the end of the line when viewing diffs
  (magit-diff-hide-trailing-cr-characters t)

  ;; Limit legth of commit message summary
  (git-commit-summary-max-length 50)

  ;; Open status buffer in same buffer
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  :config
  ;; Must define here to ensure underlying function defined in
  ;; 'init-emacs' is loaded before 'magit'.
  (defun my/magit-kill-all-buffers ()
    "Kill all buffers derived from 'magit-mode'."
    (interactive)
    (my/kill-buffers-by-mode 'magit-mode)))
#+end_src

*** Tweaks for CLI Git in Emacs

Command-line =git= is possible in =vterm=, however editing =EDITMSG= buffers can be
tedious. Since ~core.editor vim~ is set by default, =vim= bindings are required to
edit the message buffer. However, setting ~core.editor "emacs"~ will open the
=EDITMSG= buffer as a new window instead of in the current Emacs
instance. *Annoying!*

Alternatively we can install the =with-editor= package (part of =magit=) to open
the =EDITMSG= buffer inside the current Emacs instance and set ~git config
--global core.editor "emacsclient"~ to use Emacs bindings when editing the
message. See [[https://magit.vc/manual/with-editor/Using-With_002dEditor-commands.html][magit.vc/manual/with-editor]].

#+begin_src emacs-lisp 
(use-package with-editor
  :after (vterm magit)
  :commands vterm
  :config
  ;; To use current Emacs instance as "the editor" in 'vterm'
  (add-hook 'vterm-mode-hook 'with-editor-export-editor)

  ;; Activate 'with-editor' for several git message buffers
  (add-to-list 'auto-mode-alist
               '("/\\(?:COMMIT\\|NOTES\\|TAG\\|PULLREQ\\)_EDITMSG\\'"
                 . with-editor-mode))

  ;; To use Emacs bindings in the EDITMSG buffer
  (shell-command "git config --global core.editor emacsclient"))
#+end_src

*** Git-Gutter

=git-gutter= is an Emacs package providing =git-gutter-mode= that, when activated,
provides visual indication of changes to files inside a =git= repository. Colored
icons located in the gutter indicate which lines have been modified, added, or
deleted since the previous commit.

*N.B.* The mode does not play nice with =linum-mode=, so we must also install the
=git-gutter-fringe= package (see [[id:253507fc-cbf8-40a5-a490-c8651a7d44dd][Display Line Numbers in Fringe]]).

#+begin_src emacs-lisp 
(use-package git-gutter
  :hook ((prog-mode org-mode) . git-gutter-mode)
  :custom
  (git-gutter:modified-sign "=")
  (git-gutter:added-sign "+")
  (git-gutter:deleted-sign "-")
  :bind (("C-x P" . git-gutter:previous-hunk)
         ("C-x N" . git-gutter:next-hunk)
         ("C-x G" . git-gutter:popup-hunk))
  :config
  (use-package git-gutter-fringe
    :commands git-gutter-mode
    :config (global-git-gutter-mode)))
#+end_src

** Virtual Terminal

=vterm= is an Emacs package providing a terminal emulator inside Emacs. Based on
=libvterm=, a C library that enables near-native terminal performance.

#+begin_src emacs-lisp 
(use-package vterm
  :defer t
  :commands vterm
  ;; Requires compilation, which may not work without installing dependencies
  :init (setopt vterm-always-compile-module t)
  :config
  (defun my/vterm-new ()
  "Prompt the user for a new vterm buffer name and open it."
  (interactive)
  (let ((vterm-buffer-name (read-string "Enter new vterm buffer name: ")))
    (vterm (generate-new-buffer-name (concat "*" vterm-buffer-name "*"))))))
#+end_src

** Lisp
*** Automatic Indentation

=aggressive-indent= is an Emacs package providing =aggressive-indent-mode= that,
when activated, correctly indents code as you type. Changes to indentation on
one line of a function, for example, automatically adjusts the remaining lines
of code. Primarily used as a "dumb" formatter for =emacs-lisp= code.

*N.B.* Less important for =python= as other code formatter packages exist.

#+begin_src emacs-lisp 
(use-package aggressive-indent
  :hook (emacs-lisp-mode))
#+end_src

*** Elisp Documentation Lookup

=helpful= is an Emacs package extends the /built-in/ =help= package and
provides efficient, user-friendly documentation for =emacs-lisp=
functions, variables, keybindings, and more.

#+begin_src emacs-lisp 
(use-package helpful
  :bind
  (("C-h k" . helpful-kill-buffers)
    ("C-h j" . helpful-at-point)
    ("C-h f" . helpful-callable)
    ("C-h F" . helpful-function)
    ("C-h v" . helpful-variable)
    ("C-h k" . helpful-key)
    ("C-h c" . helpful-command)
    ("C-h m" . helpful-mode)
    ("C-h M" . describe-macro))
  :config
  ;; Must define here to ensure underlying function defined in
  ;; 'init-emacs' is loaded before 'helpful'.
  (defun my/helpful-kill-all-buffers ()
    (interactive)
    (my/kill-buffers-by-mode 'help-mode 'helpful-mode)))
#+end_src

** Yaml

#+begin_src emacs-lisp 
(use-package yaml-mode
  :mode ("\\.yml\\'" "\\.yaml\\'"))
#+end_src

** Provide init-dev.el

#+begin_src emacs-lisp 
(provide 'init-dev)
;;; init-dev.el ends here
#+end_src

* Writing
:PROPERTIES:
:header-args: :tangle modules/init-writing.el
:END:

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init-writing.el")>>
#+end_src

** Improve Navigation

=avy= is an Emacs package providing efficient navigation by allowing users to
jump to visible text within the buffer.

#+begin_src emacs-lisp 
(use-package avy
  :bind (("M-j" . avy-goto-char-timer)  ;; orig. 'default-indent-new-line'
         :map isearch-mode-map
         ("M-j" . avy-isearch))
  :custom
  (avy-timeout-seconds 0.3 "Seconds before overlay appears")
  (avy-style 'pre "Overyly single char at beginning of word")
  :custom-face
  ;; Change colors to improve readability
  (avy-lead-face ((t (:background "#000000" :foreground "#33A4FF" :weight bold)))))
#+end_src

** Spell Checking
:PROPERTIES:
:ID:       8a9a6083-929e-4329-b009-c33529b0e5a7
:END:

Spell checking is important for both things like narratives and git
commits. The [[https://github.com/minad/jinx][jinx]] package is preferred over the builtin =flyspell= due to
efficiency, keybindings, and ability to save words to a dictionary.

The package uses the API of the =Enchant= library [[[https://abiword.github.io/enchant/][github/enchant]]] and only
analyses visible text (instead of the entire buffer). The =jinx= package requires
the following local packages to provide spell-checking. Both =enchant= and
=pkgconf= are Arch-specific. Dictionaries are provided by =nuspell= (the modern
version of =hunspell=). See [[https://github.com/minad/jinx][gitub/jinx]] for more details. In Arch, packages can be
download by ~yay enchant pkgconf hunspell~.

  + hunspell :: Spell-checker dictionaries
  + enchant :: Wrapper for spelling libraries
  + pkgconf :: Compiler; used by =jinx= to locate =enchant=

Useful commands include:
  + jinx-next / jinx-previous :: Jump to previous/next visible
    spelling error
  + jinx-correct-all :: Allow user to correct all spelling errors in
    buffer

*QUIRK:* Comments in =src-blocks= are only checked if viewed in an =org-edit-special=
buffer accessed via ~C-c '~ . This is because =jinx= only checks text possessing
specific face properties (see ~jinx-include-faces~ and ~jinx-exclude-faces~). When
coding, we are only interested in checking comments and doc-strings;
~tree-sitter-hl-face:comment~, for example extends this functionality to =.py=
files. To check a comment, we would need to remove =org-block= in
~jinx-exclude-faces~ at the expense of checking ALL of the code.

#+begin_src elisp 
(use-package jinx
  :hook (org-mode text-mode prog-mode conf-mode)
  :bind (("C-c j c" . jinx-correct)
         ("C-c j a" . jinx-correct-all)
         ("C-c j d" . my/jinx-save-word-at-point))
  :custom
  ;; 'jinx-mode' only checks text possessing specific face properties like
  ;; 'font-lock-comment-face' in 'prog-mode' for example.
  (jinx-include-faces
   '((yaml-mode . conf-mode)
     (yaml-ts-mode . conf-mode)
     ;; Only check docstrings and comments; not strings
     (conf-mode font-lock-comment-face)
     (prog-mode font-lock-comment-face
                font-lock-doc-face
                tree-sitter-hl-face:comment
                tree-sitter-hl-face:doc)))

  (jinx-languages "en_GB")
  :config
  ;; Quickly save word-at-point to dictionary used by 'jinx'
  (defalias 'my/jinx-save-word-at-point (kmacro "C-c j c @ RET"))

  ;; 'jinx-correct' suggestions displayed as grid instead of long list
  (vertico-multiform-mode 1)
  (add-to-list 'vertico-multiform-categories
               '(jinx grid (vertico-grid-annotate . 20))))
#+end_src

** Denote
*** Denote
:PROPERTIES:
:ID:       7fed44cb-7196-48f4-9708-b6012d1c6c5d
:END:

=denote= is an Emacs package that helps users manage and organize their notes
more effectively.

Related notes:
+ [[denote:20241010T181237][How To Use Denote]]

#+begin_src emacs-lisp 
(use-package denote
  :after org
  :commands denote
  :hook (dired-mode . denote-dired-mode)
  :custom
  (denote-directory (concat my-persist-dir "notes/"))
  (denote-file-type "org")
  (denote-prompts '(title keywords))
  (denote-known-keywords '("emacs" "python" "linux" "ml" "work"))
  ;; TODO: use separate templates for coding/ect
  (denote-templates nil)
  (denote-org-front-matter (concat "#+TITLE: %1$s\n"
                                   "#+DATE: %2$s\n"
                                   "#+ID: %4$s\n"
                                   "#+FILETAGS: %3$s\n"
                                   "#+STARTUP: overview\n")))
#+end_src

*** Update dblocks Before Saving

=denote= takes advantage of dynamic =org-blocks= to dynamically organize links and
back-links. Annoyingly, they must be manually updated. Here, we add a hook to
update dynamic blocks before saving the =denote= buffer.

#+begin_src emacs-lisp 
(add-hook 'before-save-hook (lambda ()
                              (when (denote-file-is-note-p (buffer-file-name))
                                (org-update-all-dblocks))))
#+end_src

*** Consult-Denote Extension
:PROPERTIES:
:ID:       614d6cd5-6eb8-40cc-8ed1-538bcdca253d
:END:
:RELATED:
+ [[id:8b393fcc-9d43-4afb-b249-9a72bc6089ea][Consult]]
:END:

=consult-denote= is an Emacs accessory package for =denote= that extends the
preview-functionality of =consult=.  The package provides the following
functions:

+ consult-denote-find :: Alternative to ~denote-open-or-create~
+ consult-denote-grep :: Regex to filter files in =denote-directory=

#+begin_src emacs-lisp 
(use-package consult-denote
  :after (consult denote)
  :commands (consult-denote-find))
#+end_src

** Provide init-writing.el

#+begin_src emacs-lisp 
(provide 'init-writing)

;;; init-writing.el ends here
#+end_src

* Keybindings
:PROPERTIES:
:header-args: :tangle modules/init-kbd.el
:END:

#+begin_src emacs-lisp :noweb yes :comments no
<<header(FILENAME="init-kbd.el")>>
#+end_src

** Which-Key

=which-key= is an Emacs package providing the minor-mode =which-key-mode= that,
when activated, displays the available keybindings following an incomplete
command [[[https://github.com/justbur/emacs-which-key][github/whichkey]]]. For example, typing ~C-x~ will open a window showing
available keybindings (and descriptions) sharing the ~C-x~ prefix.

*N.B.* After popup window appears, use ~C-h~ to open additional navigation
options. This is helpful not all keybindings can fit in the popup window.

#+begin_src emacs-lisp 
(use-package which-key
  :config (which-key-mode)
  :custom
  (which-key-show-early-on-C-h t     "Trigger which-key manually")
  (which-key-idle-delay 0.5          "Delay before popup appears")
  (which-key-idle-second-delay 0.05  "Responsiveness after triggered")
  (which-key-popup-type 'minibuffer  "Where to show which-key")
  (which-key-max-display-columns nil "N-cols determined from monotor")
  (which-key-separator " → "         "ex: C-x DEL backward-kill-sentence")
  (which-key-add-column-padding 1    "Padding between columns of keys")
  (which-key-show-remaining-keys t   "Show count of keys in modeline"))
#+end_src

** Crux
:PROPERTIES:
:ID:       28b8a358-e893-4390-a882-7239a36efcd4
:END:
:RELATED:
+ [[id:d831e4e4-e9b1-480e-aa1a-a152d9707275][General.el]]
:END:

=crux= ("Collection of Ridiculously Useful eXtensions") is an Emacs package that
bundles many useful interactive commands to enhance the Emacs experience. There
are many functions [[[https://github.com/bbatsov/crux/blob/master/crux.el][github.com/crux]]] to choose from.

Below, we add a number of useful functions:
  + crux-move-beginning-of-line :: Move point to indentation of line
  + crux-kill-line-backwards :: Kill line backwards and adjust the indentation
  + crux-switch-to-previous-buffer :: Switch to previously opened buffer
  + crux-view-url :: Open new buffer containing contents of URL

#+begin_src emacs-lisp 
(use-package crux
  :commands (crux-move-beginning-of-line
             crux-kill-whole-line
             crux-switch-to-previous-buffer
             crux-kill-line-backwards)
  :bind (("C-a" . 'crux-move-beginning-of-line)
         ([remap kill-whole-line] . 'crux-kill-whole-line)
         ("M-o" . 'crux-switch-to-previous-buffer)
         ("C-<backspace>" . 'crux-kill-line-backwards)
         ("C-c 3" . 'crux-view-url)))
#+end_src

** Global Bindings
:PROPERTIES:
:ID:       77a39f08-8fcf-4b4f-b7c4-aef965d87cab
:END:
:RELATED:
+ [[id:d831e4e4-e9b1-480e-aa1a-a152d9707275][General.el]]
:END:

#+begin_src emacs-lisp 
;; 'Find-File-At-Point' package adds additional functionality to
;; existing keybindings
(ffap-bindings)

(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-x O") 'my/jump-to-minibuffer)
(global-set-key (kbd "C-x M-k") 'kill-current-buffer)
#+end_src

** General.el
:PROPERTIES:
:ID:       d831e4e4-e9b1-480e-aa1a-a152d9707275
:END:
:RELATED:
+ [[id:453fdeac-b2bb-4217-9803-d5c89ceaf6de][Custom Buffer Functions]]
+ [[id:8f4885df-ad58-432b-a6cd-1f4524bfc868][Custom Functions]]
+ [[id:28b8a358-e893-4390-a882-7239a36efcd4][Crux]]
+ [[id:77a39f08-8fcf-4b4f-b7c4-aef965d87cab][Global Bindings]]
:END:

=general= is an Emacs package is a keybinding management library that allows
users to setup global and local keybindings more easily.

#+BEGIN_src emacs-lisp 
(use-package general
  :custom
  (general-describe-priority-keymaps nil)
  (general-describe-keymap-sort-function 'general-sort-by-car)
  (general-describe-keybinding-sort-function 'general-sort-by-car)

  :config
  ;; Good to unset before assigning to 'my-leader-def'
  (global-unset-key (kbd "M-m"))

  (general-create-definer my-leader-def
    :keymaps 'global
    :prefix "M-m"))

;; :ignore t to define sub-section headers
(my-leader-def

 "i" '(my/eval-init :which-key "eval-init")

 ;; BUFFERS
 "b"  '(:ignore t                        :which-key "buffer")
 "bn" '(my/kill-buffer-name              :which-key "copy-buff-name")
 "bp" '(my/kill-relative-buffer-path     :which-key "copy-buff-path")
 "bl" '(my/kill-buffer-orgmode-file-link :which-key "create-buff-orgmode-link")
 "bi" '(crux-find-user-init-file         :which-key "jump-to-init")
 "bc" '(my/find-config-file              :which-key "jump-to-config")
 "bm" '(my/jump-to-minibuffer            :which-key "jump-to-minibuff")
 "bf" '(ffap-other-window                :which-key "find-file-other-window")

 ;; KILL BUFFERS
 "k"  '(:ignore t                          :which-key "killing")
 "ka" '(my/kill-all-buffers-except-scratch :which-key "kill-buffers-except-scratch")
 "ke" '(crux-kill-other-buffers            :which-key "crux-kill-other-buffers")
 "km" '(my/magit-kill-all-buffers          :which-key "kill-magit-buffs")
 "kh" '(my/helpfull-kill-all-buffers       :which-key "kill-helpful-buffs")
 "kd" '(my/dired-kill-all-buffers          :which-key "kill-dired-buffs"))
#+end_src

** Provide init-kbd.el

#+begin_src emacs-lisp 
(provide 'init-kbd)
;;; init-kbd.el ends here
#+end_src

* Load Modules
:PROPERTIES:
:ID:       8b5ba82d-d303-4970-ade6-39f82fc08b56
:header-args: :tangle init.el
:END:

Finally, we specify the packages (ie top-level org-headers) to be included in
our configuration.

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "modules" user-emacs-directory))

(require 'init-emacs)
(require 'init-ui)
(require 'init-org)
(require 'init-completion)
(require 'init-dired)
(require 'init-dev)
(require 'init-writing)
(require 'init-kbd)
;;; init.el ends here
#+end_src
