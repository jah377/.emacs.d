#+TITLE: My GNU Emacs Configuration
#+DATE: Wednesday, September 25, 2024
#+PROPERTY: header-args:emacs-lisp :results silent
#+STARTUP: overview

* Introduction

This is my literate Emacs configuration file; there are many like it,
but this one is mine. It serves as both documentation and the source
for configuring Emacs. All necessary config files are generated from
this file by calling ~org-babel-tangle~ (~C-c C-v t~), and stored in the
=/modules= sub-directory. As such, changes should be made in this
document, not in the individual config files.

*N.B.* Modules are individually imported in [[*Conclusion][Conclusion]].

* early-init.el

The =early-init.el= file, introduced with Emacs27, is the first file
that Emacs reads when starting up (before =init.el=). In principal, the
early initialization file should set-up a few basic things before
Emacs produces the initial frame, and should not depend on any
packages.

#+begin_src emacs-lisp :tangle early-init.el
;;; -*- lexical-binding: t -*-
#+end_src

** Temporarily Configure Garbage Collection

Garbage collection (GC) ensures that a program does not exceed its
memory quote or reach a point that it can no longer function. It also
frees up developers from having to manually manage a program's memory
which, in turn, reduces the potential for memory-related bugs.

However, GC can extend startup time. Therefore, we (temporarily) set
~gc-cons-threshold~ to a very large number -- effectively disabling
garbage collection. Otherwise Emacs might freeze. This strategy is
used by =Doom-Emacs= [[[https://github.com/doomemacs/doomemacs/blob/master/early-init.el][doomemacs/early-init.el]]].

*N.B.* This value is reset later in [[*Reset Garbage Collection][Reset Garbage Collection]].

#+begin_src emacs-lisp :tangle early-init.el
;; Temporarily increase garbage collect for fast startup
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

** Disable Frame Resizing

Changing the font, bars, and fringes may resize the frame in order to
preserve the number of oclumns or lines it displays. It is said that
this affects startup times.

Set prior to [[*Disable UI Elements][Disable UI Elements]] as those changes may affect frame
resizing?

+ Damien Cassou :: [[https://github.com/DamienCassou/emacs.d/blob/master/early-init.el#L25][github.com/early-init.el]]
+ Tony Zorman :: [[https://tony-zorman.com/posts/emacs-potpourri.html][A Potpourri of Emacs Tweaks]]

#+begin_src emacs-lisp :tangle early-init.el
;; Inhibit frame resizing due to visual settings
(setq frame-inhibit-implied-resize t)

#+end_src

** Disable UI Elements

#+begin_src emacs-lisp :tangle early-init.el
;; Prevent gimpse of un-styled Emacs
(menu-bar-mode   -1)
(scroll-bar-mode -1) ; Visible scrollbar
(scroll-all-mode -1) ; Synchronized scrolling of buffers
(tool-bar-mode   -1)
(tooltip-mode    -1)

;; No need for splash screen and echo area message
(setq-default inhibit-startup-screen t     ; disable start-up screen
              inhibit-startup-message t    ; disable start-up message
              initial-scratch-message nil  ; Empty initial *scratch* buffer
              initil-buffer-choice t       ; Open *scratch* buffer at init
              initial-major-mode 'fundamental-mode)
#+end_src

* init.el

#+begin_src emacs-lisp :tangle init.el
;;; -*- lexical-binding: t -*-

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s seconds with %d garbage collections."
                     (emacs-init-time "%.2f")
                     gcs-done)))
#+end_src

** Initialize Package Resources

#+begin_src emacs-lisp :tangle init.el
;; Initialize package resources
(require 'package)
(setq package-archives
      '(("gnu elpa"  . "https://elpa.gnu.org/packages/")
        ("melpa"     . "https://melpa.org/packages/")
        ("nongnu"    . "https://elpa.nongnu.org/nongnu/"))
      package-archive-priorities
      '(("melpa"    . 6)
        ("gnu elpa" . 5)
        ("nongnu"   . 4)))
(package-initialize)
#+end_src

** Setup 'use-package'

#+begin_src emacs-lisp :tangle init.el
;; Is this still necessary since 'use-package' now builtin?
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Standardize `use-package` settings
(require 'use-package-ensure)
(setq use-package-always-ensure t
      use-package-compute-statistics t
      use-package-verbose t)
#+end_src

** Tidy Emacs Directory

Default paths used to store configuraiton files and persistent data
are not consistent across Emacs packages, and are often dumped into
~user-emacs-directory~. Alternatively, the =no-littering= package stores
config and data files in =/etc= and =/var= sub-directories of
~user-emacs-directory~.

#+begin_src emacs-lisp :tangle init.el
(use-package no-littering
  :demand t
  :config
  ;; Save customizations in 'etc' sub-directory and load on startup
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file)))
#+end_src

** Reset Garbage Collection

In [[*Temporarily Configure Garbage Collection][Temporarily Configure Garbage Collection]] we maximized GC thresholds
to improve startup time. Here, we use =Doom-Emacs=' "Garbage Collection
Magic Hack" package [[[https://github.com/emacsmirror/gcmh][github/gcmh]]] to reset these values and enforce a
"sneaky" GC strategy.

#+begin_src emacs-lisp :tangle init.el
;; Garbage Collection Magic Hack
(use-package gcmh
  :init (gcmh-mode 1)
  :hook
  (after-init . garbage-collect)

  ;; Must reset GC threshold values after initialization
  (emacs-startup . (lambda () (setq gc-cons-percentage 0.1
                                    gc-cons-threshold (* 32 1024 1024)
                                    gcmh-high-cons-threshold (* 32 1024 1024)
                                    gcmh-idle-delay 30))))
#+end_src

It is recommended that we perform garbage collection when not actively
using Emacs. Therefore, we perform GC if idle for 30 seconds.(credit:
[[https://emacs.stackexchange.com/questions/34342/is-there-any-downside-to-setting-gc-cons-threshold-very-high-and-collecting-ga][StackExchange]])

#+begin_src emacs-lisp :tangle init.el
;; Idle garbage collecting
(run-with-idle-timer 30 t (lambda () (garbage-collect)))
#+end_src

** Better Defaults

Here, we configure default built-in Emacs settings.

*** Frame

#+begin_src emacs-lisp :tangle init.el
;; Change frame title w.r.t. current buffer
(setq frame-title-format
      '("emacs: " (:eval (if (buffer-file-name)
                             (abbreviate-file-name (buffer-file-name)) "%b"))))

;; Maximize frame size at init
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
*** Prompts

#+begin_src emacs-lisp :tangle init.el
;; Too lazy to type 'yes-or-no'
(setq use-short-answers t)
(fset 'yes-or-no-p 'y-or-n-p)

;; Kill buffer, even if live process attached
;; https://www.masteringemacs.org/article/disabling-prompts-emacs
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))
#+end_src

*** Mini-Buffer
**** Recursive Minibuffer

#+begin_src emacs-lisp :tangle modules/my-completion.el
;; Support opening new minibuffers from inside existing minibuffers
(setq enable-recursive-minibuffers t)
#+end_src

**** Prompt Indicator to 'completing-read-multiple'

Recommended in the configuration of =vertico= package [[[https://github.com/minad/vertico][github/vertico]]],
the custom function ~crm-indicator~ adds an indicator to the completion
prompt when using ~completing-read-multiple~ which can be useful for
visually distinguishing prompts or results.

#+begin_src emacs-lisp :tangle modules/my-completion.el
(defun crm-indicator (args)
  "Add indicator to completion promp when using 'completing-read-multiple'"
  (cons (format "[CRM%s] %s"
                (replace-regexp-in-string
                 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                 crm-separator)
                (car args))
        (cdr args)))
(advice-add #'completing-read-multiple :filter-args #'crm-indicator)
#+end_src

For example, calling the example function ~test-crm-indicator~ indicates
that selecting multiple options is both possible using a
comma-separator. *N.B.* src-block not tangled to configuration file.

#+begin_src emacs-lisp :tangle no
(defun test-crm-indicator ()
  "A custom function using completing-read-multiple."
  (interactive)
  (let ((choices '("Option A" "Option B" "Option C")))
    (completing-read-multiple "Choose options: " choices)))
#+end_src

**** Make Minibuffer Prompt Read-Only

Again, recommended in the configuration of the =vertico= package
[[[https://github.com/minad/vertico][github/vertico]]]. This code defines the minibuffer prompt to be
read-only and makes the cursor intangible when it is over the
minibuffer prompt. In other words, text in the minibuffer cannot be
selected or modified by the cursor. This can be useful for creating a
visually distinct and non-editable minibuffer prompt.

#+begin_src emacs-lisp :tangle modules/my-completion.el
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

For example if ~(setq minibuffer-prompt-properties nil)~ and we call
~M-x~, it would be possible to modify the prompt by moving the cursor
back ~C-b~ and deleting M, -, or x. _Not ideal_.

**** Close Minibuffer Regardless of Point Location

#+begin_src emacs-lisp :tangle init.el
;; Closes minibuffer regardless of point location
(advice-add 'keyboard-quit :before (lambda ()
                                     (when (active-minibuffer-window)
                                       (abort-recursive-edit))))
#+end_src
*** Indentation Style

#+begin_src emacs-lisp :tangle init.el
;; Disable 'TAB' for indentation
(setq-default indent-tabs-mode nil)

;; Use 'TAB' for auto-completion selection
(setq-default tab-always-indent 'complete)

;; Number of spaces occupied by 'TAB'
(setq-default tab-width 4
              standard-indent 4)
#+end_src

*** Whitespace

The builtin =whitespace-mode= is useful for visualizing and
automatically cleaning up white-spaces in our buffers. [[https://www.emacswiki.org/emacs/WhiteSpace][Emacswiki]]
provides a nice overview of the settings.

The ~whitespace-style~ variable specifies how blank white-spaces are
visualized and the following are included in our configuration:

  + face :: Enable all visualization via faces. Required for
    visualization of many white-spaces listed below.
  + trailing :: Trailing blanks are visualized via faces.
  + lines-tail :: Columns beyond ~whitespace-line-column~ are
    highlighted via faces (must exclude =lines= in our configuration).
  + empty :: Empty lines at beginning/end of buffer are visualized.
  + indentation::space :: TABs at beginning of lines are visualized.
  + space-before-tab::tab :: SPACEs before TAB are visualized.

#+begin_src emacs-lisp :tangle init.el
;; Built-in Emacs variable highlights empty lines
(setq indicate-empty-lines t)

;; Visualize whitespace and remove on cleanup
(use-package whitespace
  :hook (((prog-mode org-mode) . whitespace-mode)
         (before-save . whitespace-cleanup))
  :custom
  (whitespace-line-column 79 "Highlight text beyond column")
  (whitespace-style '(face
                      trailing
                      lines-tail
                      empty
                      indentation::space
                      space-before-tab::tab))
  :config
  ;; Turn off global whitespace mode
  (global-whitespace-mode 0))
#+end_src

*** Mouse/Scrolling

#+begin_src emacs-lisp :tangle init.el
(setq  mouse-wheel-scroll-amount '(1 ((shift) . 1)) ; scroll one line at a time
       mouse-wheel-progressive-speed nil            ; don't accelerate scrolling
       mouse-wheel-follow-mouse 't                  ; scroll window under mouse
       mouse-yank-at-point t)                       ; Mouse paste at point, not cursor

;; Scrolling at end of document adds one line
(setq scroll-step 1)

;; Use pixel scrolling instead of by line
;; https://tony-zorman.com/posts/emacs-potpourri.html
(pixel-scroll-precision-mode 1)
#+end_src

*** Cursor

#+begin_src emacs-lisp :tangle init.el
(setq-default cursor-type 'bar)

;; Flash cursor location when switching buffers
(use-package beacon
  :config (beacon-mode 1))
#+end_src

*** Writing

#+begin_src emacs-lisp :tangle init.el
;; Replace active region by typing text
(delete-selection-mode 1)
#+end_src

*** Highlighting

#+begin_src emacs-lisp :tangle init.el
;; Highlight line containing point
(global-hl-line-mode)

;; Highlight matching parentheses
(use-package paren
  :custom
  (show-paren-style 'parenthesis "Only highlight ()")
  (show-paren-ring-bell-on-mismatch t)
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t)
  ;; If cursor on ), show overlay for (
  ;; Unfortunately does not work other way around
  (show-paren-context-when-offscreen 'overlay))
#+end_src

*** Bookmarks

The built-in =bookmark.el= package allows us to quickly store and access
specific locations in frequently visited files. I mostly use the
following functions:

+ bookmark-set :: ~C-x r m~; Set bookmark at current location
  - Prompt user for desired name of bookmark
  - Bookmarked locations indicated by flag in fringe of buffer
  - Bookmark details stored in =bookmark-alist=
+ bookmark-jump :: ~C-x r b~; Select bookmark and jump to location
+ bookmark-save :: Export =bookmark-alist= to specified file
+ bookmark-delete :: Delete bookmark in =bookmark-alist=
+ bookmark-bmenu-list :: Open buffer containing all bookmarks

*N.B.* The built-in =register.el= package is a more temporary alternative
to =bookmark=, and are assigned to a single character instead of a
name. For more information, checkout this [[https://www.youtube.com/watch?time_continue=3&v=RLPU65RLiC4&embeds_referring_euri=https%3A%2F%2Fwww.reddit.com%2F][youtube video]]. I have not
explored registers much.

#+begin_src emacs-lisp :tangle init.el
(use-package bookmark
  :custom
  ;; By default 'no-littering' package stores bookmark file to 'var/', which is
  ;; lost if performing a "fresh" Emacs install. To persist, set
  ;; 'bookmark-default-file' to store in personal 'scratch/' directory.
  ;; (bookmark-default-file "~/scratch/jon/.bookmarks.el")
  (bookmark-save-flag t "Save bookmarks when Emacs killed")
  (bookmark-fringe-mark t "Non-nil to show icon in fringe"))
#+end_src

* my-visuals.el
** Visual Advice

#+begin_src emacs-lisp :tangle modules/my-visuals.el
;;; -*- lexical-binding: t -*-

;; Discard all themes before loading next
(define-advice load-theme (:before (&rest _args) theme-dont-propagate)
  (mapc #'disable-theme custom-enabled-themes))
#+end_src

** Theme

#+begin_src emacs-lisp :tangle modules/my-visuals.el
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Toggle Light & Dark Themes

#+begin_src emacs-lisp :tangle modules/my-visuals.el
(defun light ()
  (interactive)
  (load-theme 'doom-tomorrow-day t))

(defun dark ()
  (interactive)
  (load-theme 'doom-one t))

(dark)
#+end_src

** Icons

#+begin_src emacs-lisp :tangle modules/my-visuals.el
(use-package nerd-icons
  :config
  ;; Download nerd-icons if directory not found
  (unless (car (file-expand-wildcards
                (concat user-emacs-directory "elpa/nerd-icons-*")))
    (nerd-icons-install-fonts t)))
#+end_src

** Modeline

#+begin_src emacs-lisp :tangle modules/my-visuals.el
(use-package doom-modeline
  :config (doom-modeline-mode 1)
  :custom
  ;; Display project_name/../file_name
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  (doom-modeline-buffer-encoding nil "Dont care about UTF-8 badge")
  (doom-modeline-vcs-max-length 30 "Limit branch name length")
  (doom-modeline-enable-word-count t "Turn on wordcount"))
#+end_src

** Provide Visuals

#+begin_src emacs-lisp :tangle modules/my-visuals.el
(provide 'my-visuals)
#+end_src

* my-org.el
** Org Basics

#+begin_src emacs-lisp :tangle modules/my-org.el
  ;;; -*- lexical-binding: t -*-

;; The essentials
(use-package org
  :demand t
  :bind (("C-c l" . org-store-link)
         ("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :hook (org-src-mode . whitespace-cleanup)
  :custom
  (org-startup-folded t "Always fold headers")
  (org-startup-indented t "Visually indent at startup")
  (org-adapt-indentation t "Align contents with heading"))
#+end_src

** Org Appearance
*** Modernize Org UI

#+begin_src emacs-lisp :tangle modules/my-org.el
;; "Modernizes" UI experience of 'org-mode'
(use-package org-modern
  :after org
  :init (global-org-modern-mode)
  :hook ((org-mode                 . org-modern-mode)
         (org-agenda-finalize-hook . org-modern-agenda))
  :commands (org-modern-mode org-modern-agenda))
#+end_src

*** Emphasis Markers

#+begin_src emacs-lisp :tangle modules/my-org.el
(setq org-hide-emphasis-markers t)

;; Interactively toggle visability if cursor between markers
(use-package org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :custom (org-appear-inside-latex t))
#+end_src

** Org Key Behavior

#+begin_src emacs-lisp :tangle modules/my-org.el
;; 'C-a/e' jump to start-end of headline text
(setq org-special-ctrl-a/e t)

;; 'C-k' behave different on headline text
(setq org-special-ctrl-k t)

;; Do not delete hidden subtree with 'C-k'
(setq org-ctrl-k-protect-subtree t)

;; ? speed-key opens Speed Keys help.
(setq org-use-speed-commands
      ;; If non-nil, 'org-use-speed-commands' allows efficient
      ;; navigation of headline text when cursor is on leading
      ;; star. Custom function allows use of Speed keys if on ANY
      ;; stars.
      (lambda ()
        (and (looking-at org-outline-regexp)
             (looking-back "^\**"))))
#+end_src

** Org-Babel
*** General Org-Babel Settings

#+begin_src emacs-lisp :tangle modules/my-org.el
(setq org-confirm-babel-evaluate nil
        org-src-window-setup 'current-window
        org-src-ask-before-returning-to-edit-buffer t)

;; Remove code indentation in org-src blocks
(setq org-src-preserve-indentation t)
#+end_src

*** FIX: Display ANSI Error Colors

#+begin_src emacs-lisp :tangle modules/my-org.el
;; https://github.com/emacs-jupyter/jupyter/issues/366
(defun display-ansi-colors ()
  (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

** Org Templates
*** Org-Block Templates

#+begin_src emacs-lisp :tangle modules/my-org.el
(setq org-structure-template-alist
      '(("x" . "example")
        ("q" . "quote")
        ("e" . "src emacs-lisp")
        ("m" . "src emacs-lisp :tangle modules/my-")
        ("s" . "src sh")
        ("p" . "src python")))
#+end_src

** Provide my-org

#+begin_src emacs-lisp :tangle modules/my-org.el
(provide 'my-org)
#+end_src

* my-completion.el

#+begin_src emacs-lisp :tangle modules/my-completion.el
;;; -*- lexical-binding: t -*-
#+end_src

** Vertico
*** Vertico + Savehist

The =vertico= package provides mini-buffer completion. Without it, for
instance, I am required to blindly type the name of the desired buffer
or file-path when calling ~switch-to-buffer~ or ~find-file~. Previous
completions are more quickly available

The =savehist= package saves the mini-buffer history so previous
completions are more quickly available.

*N.B.* The author recommends activating the packages in the ~:init~
section of =use-package= such that the mode gets enabled right
away. Note that this forces loading the package.

#+begin_src emacs-lisp :tangle modules/my-completion.el
;; Copied from https://github.com/minad/vertico
(use-package vertico
  :custom
  (vertico-cycle t "Return to top of list")
  (vertico-count 10 "N candidate suggestions")
  :hook (minibuffer-setup . vertico-repeat-save)
  :init (vertico-mode))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init (savehist-mode))
#+end_src

*** Vertico-Directory

#+begin_src emacs-lisp :tangle modules/my-completion.el
;; Configure directory extension.
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** Marginalia

*N.B.* =nerd-icons= package added in [[*Icons][Icons]].

#+begin_src emacs-lisp :tangle modules/my-completion.el
;; Provides additional data to mini-buffer completion
(use-package marginalia
  :init (marginalia-mode 1))

;; Add nerd-icons to mini-buffer marginalia
(use-package nerd-icons-completion
  :after (marginalia nerd-icons)
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :config (nerd-icons-completion-mode))
#+end_src

** Orderless

#+begin_src emacs-lisp :tangle modules/my-completion.el
;; Copied from https://github.com/oantolin/orderless/tree/master
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Provide my-completion.el

#+begin_src emacs-lisp :tangle modules/my-completion.el
(provide 'my-completion)

;;; my-completion.el ends here
#+end_src

