#+TITLE: Managing Python Virtual Environments
#+DATE: Monday, January 13, 2025
#+STARTUP: overview

* Introduction

This document outlines the tools and procedures necessary for creating and
organizing =python= virtual environments (=venv=).

* Background
** Creating a Virtual Environment
:PROPERTIES:
:ID:       bfb0a056-b50f-47e4-a229-0fbba6e19b54
:END:

Working with =venv= requires three steps: (1) installing =virtualenv=, (2) creating
the =venv=, and (3) activating it. *N.B.* This assumes =pip= is installed.

*Resources:*
+ [[https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/][packaging.python.org]] :: Installing Using Pip and Virtual Environments


#+begin_src sh
# Install 'virtualenv'
pip install virtualenv

# Create venv
python3 -m venv example_venv

# Activate venv
source <venv-path>/example_venv/bin/activate

# Load packages
...

# Remove venv
rm -r <venv-path>/example_venv
#+end_src

* Preliminaries
** Virtual Environment Manager

=virtualenvwrapper= is an extension that makes creating, deleting, and managing
=venvs= easier. The package centralizes virtual environments in
~$WORKON_HOME=$HOME/.virtualenvs~ and provides user-friendly CLI commands for
managing and switching between =venvs=.

To install on Arch Linux:

#+begin_src sh
# To intsall on Arch Linux:
yay python-virtualenvwrapper
#+end_src

To access the CLI commands every time, the following must be added to =.bashrc=:

#+begin_src sh
source /usr/bin/virtualenvwrapper.sh
source /usr/bin/virtualenvwrapper_lazy.sh
#+end_src

Now, working on =venvs= is much easier:

#+begin_src sh
# Create venv; default location = ~/.virtualenvs
mkvirtualenv example_venv

# Activate venv
workon example_venv

# Load packages
...

# Remove venv
rmvirtualenv example_venv
#+end_src

** Python Package Manager

In python, =pip= is the default package manager used to install, manage, and
remove python libraries and dependencies. However, it is slow. Instead, we will
use [[https://github.com/astral-sh/uv][uv]], an extremely fast alternative written in =Rust=.

#+begin_src sh
# By default, installed to '/home/jon/.local/bin'
curl -LsSf https://astral.sh/uv/install.sh | sh
#+end_src

In [[id:bfb0a056-b50f-47e4-a229-0fbba6e19b54][Creating a Virtual Environment]], we created a =venv= using =pip= (slow). Here, we
create a =venv= using =uv= (fast).

#+begin_src sh
# Create 'example_venv'; specifying python version not necessary
uv venv ~/.virtualenvs/example_venv --python 3.12

# Activate using virtualenvwrapper.sh
workon example_venv

# Install packages
uv pip install pandas numpy matplotlib

# Remove venv
rmvirtualenv example_venv
#+end_src

** Create 'tool' VENV

Many python packages provide applications that can be used as tools. Creating a
separate =tool= environment is a practical strategy for managing development
tools. Advantages include:

+ Isolate Dependencies :: Dependencies of linters like =flake8=, formatters like
  =black= and language servers like =pyright= will not conflict with
  project-specific dependencies.

+ Global Pollution :: Tools do not need to be installed globally in
  system-level python

#+begin_src sh
# Create venv using 'uv'
# Note: ~/.virtualenvs created by 'virtualenvwrapper'
uv venv ~/.virtualenvs/tools

# Example: jupyter required to make kernels
uv pip install jupyter
#+end_src

** Create Jupyter Kernels

We are interested creating =Jupyter kernels= (see [[id:4d2b331f-7ced-46b2-a764-db4ff2b79688][Jupyter Kernels]]). It is
possible to create a =kernel= from a =venv= by doing the following:

#+begin_src sh
workon example_venv

# Create kernel from 'example_venv'
python3 -m ipykernel install --user --name example_venv
#+end_src
