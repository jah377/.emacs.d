#+TITLE: Managing Python Virtual Environments
#+DATE: Monday, January 13, 2025
#+PROPERTY: :eval no
#+STARTUP: overview
:PROPERTIES:
:ID:       704c013f-3d97-4f4f-8452-a5906d417d5a
:END:

* Introduction

The goal of this narrative is to document the installation of tools required
to create and manage virtual environments (=venvs=) and =jupyter-kernels= used for
=python= development.

*Resources:*
+ realpython.org :: [[https://realpython.com/python-virtual-environments-a-primer/][Python venv Primer]]
+ Brett Cannon :: [[https://snarky.ca/classifying-python-virtual-environment-workflows/][Classifying Python venv Workflows]]
+ pybit.com :: [[https://pybit.es/articles/a-better-place-to-put-your-python-virtual-environments/][A Better Place for Python venvs]]

* Necessary Tools
** =uv= Python Package Manager

[[https://github.com/astral-sh/uv][uv]], is a =python= package manager used to install, manage, and remove python
libraries and dependencies. It is written in =rust= and therefore is must faster
than =pip=.

*Resources:*
+ Vishnu Sivan :: [[https://codemaker2016.medium.com/introducing-uv-next-gen-python-package-manager-b78ad39c95d7][Introducing uv: Next-Gen Python Package Manager]]

*** Installing uv

#+begin_src sh
# To install on Arch Linux:
curl -LsSf https://astral.sh/uv/install.sh | sh
#+end_src

*** Setting up uv

Must add the following lines to the shell configuration file (=~/.bashrc=):

#+begin_src sh
# On Arch, 'uv' installed to '/home/jon/.local/bin'
export PATH="$HOME/.local/bin:$PATH"
#+end_src

*N.B.* It is possible to install =python= directly using =uv=.

#+begin_src sh
uv python install 3.11 3.12
#+end_src

*** NOTE: Using uv to Install Python

A =python= version is composed of an interpreter (the ~python~ executable), the
standard library, and other supporting files. It is possible to install
different versions of =python= using =uv= by calling:

#+begin_src sh
uv python install $VERSION
#+end_src

By default, =uv= will install =python= to =~/.local/share/uv/python/=. However, we
need to install the =python= executable into our ~$PATH~ to be recognized by our
system.

#+begin_src sh
uv python install $VERSION --preview
#+end_src

** =virtualenvwrapper= venv Manager

[[https://virtualenvwrapper.readthedocs.io/en/latest/][virtualenvwrapper]] is a =python= tool that provides a set of convenient =bash= shell
commands to manage =venvs=. It simplifies working with multiple =venvs= by
organizing them in a central location, see ~WORKON_HOME~ variable assignment. The
package builds on =virtualenv= but streamlines the process by eliminating the
need to navigate to different directories and manually activate environments.

*Resources:*
+ dev.to :: [[https://dev.to/zeyu2001/managing-python-virtual-environments-with-virtualenvwrapper-502c][Managing Python venvs with virtualenvwrapper]]

*** Installing virtualenvwrapper

#+begin_src sh
# To install on Arch Linux:
yay python-virtualenvwrapper
#+end_src

*** Setting up virtualenvwrapper

Must add the following lines to the shell configuration file (=~/.bashrc=):

#+begin_src sh
export WORKON_HOME=$HOME/.virtualenvs # default
source $(which virtualenvwrapper.sh)
#+end_src

And install =virtualenvwrapper= _only_ at the system-wide level:

#+begin_src sh
uv pip install virtualenvwrapper
#+end_src

* How to Create a Jupyter Kernel

A =jupyter-kernel= is a computational engine built on a =venv= and enables the
interactive evaluation of =python= code. As such, we must first create the =venv=,
install the ~ipykernel~ (along with other dependencies), and activate the kernel.

#+begin_src sh
# Create 'example-env'  python3.12
uv venv -p 3.12 ~/.virtualenvs/example-env

# Activate environment (using 'virtualenvwrapper' function) so that subsequent
# commands use our new venv
workon example-env

# Install some packages
uv pip install pandas numpy matplotlib

# Cannot create jupyter-kernel without 'ipykernel'
uv pip install ipykernel

# --user flag installs the kernel for the current user
python3 -m ipykernel install --user --name $VENV
#+end_src

*N.B.* Creating the kernel does not make it instantly available to Emacs. Must
refresh the list of kernels by calling ~M-: (jupyter-available-kernelspecs t)~.

*Resources:*
+ saturncloud.to :: [[https://saturncloud.io/blog/how-to-add-a-python-3-kernel-to-jupyter-ipython/][how to Create a Jupyter Kernel]]

* Resources
